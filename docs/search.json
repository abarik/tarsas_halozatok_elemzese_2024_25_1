[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Társas hálózatok elemzése",
    "section": "",
    "text": "A kurzusról\nA hálózatkutatás bár a 2000-es években futott fel igazán a társadalomtudományokban, de a gyökerei már a szociológia kezdeteitől jelen voltak. A kurzus azt a célt tűzi ki, hogy a hallgatókat megismertesse a kapcsolathálózati és hálózatkutatási gondolkodás legfontosabb elméleti és módszertani alapvetéseivel. A kurzus során megismerkedhetnek a hallgatók az alapvető gráfelméleti fogalmakkal és a teljes hálózatokat elemző módszerekkel, valamint a szociometriai kutatási irányokkal is. Hangsúlyosan olyan tanulmányokat dolgozunk fel, amik a leginkább releváns hálózatelemzési kérdésekkel foglalkoznak. A kurzuson belül kitérünk a hazai hálózatkutatás legfrissebb eredményeire is.",
    "crumbs": [
      "A kurzusról"
    ]
  },
  {
    "objectID": "index.html#elérhetőség",
    "href": "index.html#elérhetőség",
    "title": "Társas hálózatok elemzése",
    "section": "Elérhetőség",
    "text": "Elérhetőség\nKérdés esetén email-ben vagyok elérhető, vagy fogadóórában állok rendelkezésre.\nabari.kalman@arts.unideb.hu",
    "crumbs": [
      "A kurzusról"
    ]
  },
  {
    "objectID": "index.html#jegyszerzés",
    "href": "index.html#jegyszerzés",
    "title": "Társas hálózatok elemzése",
    "section": "Jegyszerzés",
    "text": "Jegyszerzés\nA félév során két ZH-t írnak a hallgatók. A két ZH alapján megajánlott jegyet kapnak. Aki nem írta meg a ZH-kat, vagy nem felel meg számára a megajánlott jegy, írásbeli vizsgát tehet a vizsgaidőszakban. Egyik ZH sem lehet elégtelen. A magyar nyelvű irodalmak kötelezők és tartalmuk a ZH-kon és a vizsgán számonkérhető, az angol nyelvű irodalmak csak ajánlottak.\nUgyan a végső jegy összetételét a két ZH 50-50%-ban meghatározza, de plusz százalékpontok gyűjthetők például házi feladatok, kiselőadások és órai aktivitás alapján. A végső jegy meghatározása a következő táblázat alapján történik:\n\nJegyszerzés\n\n\nEredmény\nMegajánlott jegy\n\n\n\n\n0–50%\nelégtelen\n\n\n51–60%\nelégséges\n\n\n61–74%\nközepes\n\n\n75–85%\njó\n\n\n86%–\njeles",
    "crumbs": [
      "A kurzusról"
    ]
  },
  {
    "objectID": "index.html#a-kurzus-formája",
    "href": "index.html#a-kurzus-formája",
    "title": "Társas hálózatok elemzése",
    "section": "A kurzus formája",
    "text": "A kurzus formája\nA kurzus teljes mértékben gyakorlati jellegű, az önálló hálózatelemzéshez szükséges ismeretek elsajátítása a cél. A kurzus során az RStudio/R programcsomagot használjuk.",
    "crumbs": [
      "A kurzusról"
    ]
  },
  {
    "objectID": "index.html#szoftverek",
    "href": "index.html#szoftverek",
    "title": "Társas hálózatok elemzése",
    "section": "Szoftverek",
    "text": "Szoftverek\nA számítógépünkre telepítsük a következő szoftvercsomagokat:\n\nR - https://www.r-project.org/\nRStudio Desktop - https://posit.co/products/open-source/rstudio/\nR csomagok:\n\n\ninstall.packages(\"igraph\")\ninstall.packages(\"qgraph\")",
    "crumbs": [
      "A kurzusról"
    ]
  },
  {
    "objectID": "index.html#olvasmányok",
    "href": "index.html#olvasmányok",
    "title": "Társas hálózatok elemzése",
    "section": "Olvasmányok",
    "text": "Olvasmányok\n\nKötelező:\n\nBarabási (2011)\nMérei (1998, o. 44–323)\nCsermely (2005, o. 1–4, 8 fejezetek)\n\nAjánlott olvasmányok\n\nMolnár (2020)\nHoffman és mtsai. (2022)",
    "crumbs": [
      "A kurzusról"
    ]
  },
  {
    "objectID": "index.html#linkek",
    "href": "index.html#linkek",
    "title": "Társas hálózatok elemzése",
    "section": "Linkek",
    "text": "Linkek\n\nhttp://linkgroup.semmelweis.hu/docs/09-tarsadalmi-halok.pdf\nhttp://szociogram.hu/blog/wp-content/uploads/2015/04/PedSzakpszichSzakdolgozatGyT.pdf\n\n\n\n\n\nBarabási, A.-L. (2011). Behálózva. A hálózatok új tudománya. Helikon Kiadó.\n\n\nCsermely, P. (2005). A rejtett hálózatok ereje. Vince Kiadó. http://linkgroup.semmelweis.hu/weaklinks_HU.php\n\n\nHoffman, T., Basa, B., & N. Kollár, K. (2022). Új sztenderdek a magyar szociometriai gyakorlatban. https://doi.org/10.17627/ALKPSZICH.2022.1.67\n\n\nMérei, F. (1998). Közösségek rejtett hálózata. Osiris Kiadó.\n\n\nMolnár, L. (2020). A hálózatelemzés alapfogalmai  gráfok, centralitás, szomszédosság, hidak és a kis világ. In Scientia rerum politicarum (o. 123–140). Dialóg Campus. https://doi.org/10.36250/00734.07",
    "crumbs": [
      "A kurzusról"
    ]
  },
  {
    "objectID": "tematika.html",
    "href": "tematika.html",
    "title": "Tematika",
    "section": "",
    "text": "Bevezetés, kedvcsináló",
    "crumbs": [
      "Tematika"
    ]
  },
  {
    "objectID": "tematika.html#bevezetés-kedvcsináló",
    "href": "tematika.html#bevezetés-kedvcsináló",
    "title": "Tematika",
    "section": "",
    "text": "Barabási Albert-László: Behálózva - a hálózatok csodálatos világa.\nBehálózva 2.0 - Barabási Albert-László előadása.\nBarabási (2011, o. 7–14) (Bevezetés fejezet)\nCsányi & Szendrői (2004)",
    "crumbs": [
      "Tematika"
    ]
  },
  {
    "objectID": "tematika.html#a-kapcsolathálózati-szemlélet.-gráfelméleti-alapok.",
    "href": "tematika.html#a-kapcsolathálózati-szemlélet.-gráfelméleti-alapok.",
    "title": "Tematika",
    "section": "A kapcsolathálózati szemlélet. Gráfelméleti alapok.",
    "text": "A kapcsolathálózati szemlélet. Gráfelméleti alapok.\n\nBarabási (2011, o. 15–47) (1-3. fejezet)\nMolnár (2020)",
    "crumbs": [
      "Tematika"
    ]
  },
  {
    "objectID": "tematika.html#irányított-gráfok.-centralitás.",
    "href": "tematika.html#irányított-gráfok.-centralitás.",
    "title": "Tematika",
    "section": "Irányított gráfok. Centralitás.",
    "text": "Irányított gráfok. Centralitás.\n\nKürtösi (2011)\nBarabási (2011, o. 48–89) (4-6. fejezet)\n\n\n\n\n\nBarabási, A.-L. (2011). Behálózva. A hálózatok új tudománya. Helikon Kiadó.\n\n\nCsányi, G., & Szendrői, B. (2004). Szociális hálózatok. Beszélő, 9(7). http://beszelo.c3.hu/cikkek/szocialis-halozatok\n\n\nKürtösi, Z. (2011). Társadalmi kapcsolathálózatok elemzése (K. Takács, Szerk.; o. 19–31). BCE Szociológia és Társadalompolitika Intézet. https://unipub.lib.uni-corvinus.hu/4699/\n\n\nMolnár, L. (2020). A hálózatelemzés alapfogalmai  gráfok, centralitás, szomszédosság, hidak és a kis világ. In Scientia rerum politicarum (o. 123–140). Dialóg Campus. https://doi.org/10.36250/00734.07",
    "crumbs": [
      "Tematika"
    ]
  },
  {
    "objectID": "01_halozatok_R_ben.html",
    "href": "01_halozatok_R_ben.html",
    "title": "1  Hálózatok az R-ben",
    "section": "",
    "text": "1.1 Bevezetés az igraph csomagba\nSzámos szoftver képes hálózati adatokat feldolgozni, kezelni és megjeleníteni. Ebben a kurzusban a R/RStudio {igraph} csomagját fogjuk használni.\nEgy hálózat (vagy gráf) egy igraph objektumnak feletethető meg. Az fogjuk bemutatni, hogyan hozható létre új igraph objektum közvetlenül nyers adatokból. A használt függvények:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Hálózatok az R-ben</span>"
    ]
  },
  {
    "objectID": "01_halozatok_R_ben.html#bevezetés-az-igraph-csomagba",
    "href": "01_halozatok_R_ben.html#bevezetés-az-igraph-csomagba",
    "title": "1  Hálózatok az R-ben",
    "section": "",
    "text": "graph.edgelist() - hálózat létrehozása élek listájából\nplot() - hálózat megjelenítése\nV() - a csúcsok száma és megnevezése\nE() - az élek száma és az élek azonosítása csúcsokkal\ngsize() / ecount() - az élek száma\ngorder() / vcount() - a csúcsok száma\n\n\n1.1.1 igraph objektum létrehozása\nHogyan hozzunk létre igraph objektumot élek listájából? A következő adatok egy diákcsoportban fennálló barátságokat tárja fel. A friends adattábla minden sora egy élt (vagyis a barátság jelenlétét a két személy között) jelöl a hálózatban.\n\nlibrary(tidyverse)\nfriends &lt;- tribble(\n                ~name1,   ~name2,\n             \"Jessie\",  \"Sidney\",\n             \"Jessie\",   \"Britt\",\n             \"Sidney\",   \"Britt\",\n             \"Sidney\",  \"Donnie\",\n               \"Karl\",   \"Berry\",\n             \"Sidney\",    \"Rene\",\n              \"Britt\",    \"Rene\",\n             \"Shayne\",  \"Sidney\",\n             \"Sidney\",  \"Elisha\",\n             \"Sidney\", \"Whitney\",\n             \"Jessie\", \"Whitney\",\n             \"Donnie\",   \"Odell\",\n             \"Sidney\",   \"Odell\",\n               \"Rene\", \"Whitney\",\n             \"Shayne\",  \"Donnie\",\n             \"Jessie\",    \"Lacy\",\n               \"Rene\",    \"Lacy\",\n             \"Elisha\",  \"Eugene\",\n             \"Eugene\",    \"Jude\",\n              \"Berry\",   \"Odell\",\n              \"Odell\",  \"Rickie\",\n              \"Odell\",    \"Karl\",\n              \"Britt\",    \"Lacy\",\n             \"Elisha\",    \"Jude\",\n               \"Lacy\", \"Whitney\",\n              \"Britt\", \"Whitney\",\n               \"Karl\",   \"Tommy\"\n)\nhead(friends) # az első 6 sor\n#&gt; # A tibble: 6 × 2\n#&gt;   name1  name2 \n#&gt;   &lt;chr&gt;  &lt;chr&gt; \n#&gt; 1 Jessie Sidney\n#&gt; 2 Jessie Britt \n#&gt; 3 Sidney Britt \n#&gt; 4 Sidney Donnie\n#&gt; 5 Karl   Berry \n#&gt; 6 Sidney Rene\n\nAz {igraph} csomag telepítése és betöltése.\n\n# install.packages(\"igraph\")\nlibrary(igraph)\n\nSzükséges technikai lépés, amely a friends adattáblát mátrixszá alakítja.\n\n# mátrixszá alakítjuk\nfriends.mat &lt;- as.matrix(friends)\n\nAz igraph objektum létrehozása.\n\n# igraph objektum létrehozása\ng &lt;- graph.edgelist(friends.mat, directed = FALSE)\n\nHogyan jeleníthetjük meg a hálózatot?\n\n# A hálózat megjelenítése\nplot(g)\n\n\n\n\n\n\n\n\n\n\n1.1.2 Csúcsok és élek számolása\nEgy hálózatról számos információt lekérhetünk. Megszámolhatjuk a hálózat csúcsait és éleit.\nRészletes információ a csúcsokról.\n\nV(g) # a csúcsok száma és megnevezése\n#&gt; + 16/16 vertices, named, from f07d19a:\n#&gt;  [1] Jessie  Sidney  Britt   Donnie  Karl    Berry   Rene   \n#&gt;  [8] Shayne  Elisha  Whitney Odell   Lacy    Eugene  Jude   \n#&gt; [15] Rickie  Tommy\n\nRészletes információ az élekről.\n\nE(g) # az élek száma és az élek azonosítása csúcsokkal\n#&gt; + 27/27 edges from f07d19a (vertex names):\n#&gt;  [1] Jessie --Sidney  Jessie --Britt   Sidney --Britt  \n#&gt;  [4] Sidney --Donnie  Karl   --Berry   Sidney --Rene   \n#&gt;  [7] Britt  --Rene    Sidney --Shayne  Sidney --Elisha \n#&gt; [10] Sidney --Whitney Jessie --Whitney Donnie --Odell  \n#&gt; [13] Sidney --Odell   Rene   --Whitney Donnie --Shayne \n#&gt; [16] Jessie --Lacy    Rene   --Lacy    Elisha --Eugene \n#&gt; [19] Eugene --Jude    Berry  --Odell   Odell  --Rickie \n#&gt; [22] Karl   --Odell   Britt  --Lacy    Elisha --Jude   \n#&gt; [25] Whitney--Lacy    Britt  --Whitney Karl   --Tommy\n\nCsak az élek száma.\n\ngsize(g) # élek száma\n#&gt; [1] 27\necount(g) # élek száma\n#&gt; [1] 27\n\nCsak a csúcsok száma.\n\ngorder(g) # csúcsok száma\n#&gt; [1] 16\nvcount(g) # csúcsok száma\n#&gt; [1] 16",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Hálózatok az R-ben</span>"
    ]
  },
  {
    "objectID": "02_alapfogalmak.html",
    "href": "02_alapfogalmak.html",
    "title": "2  Alapfogalmak",
    "section": "",
    "text": "2.1 A fejezet fontos fogalmai",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Alapfogalmak</span>"
    ]
  },
  {
    "objectID": "02_alapfogalmak.html#a-fejezet-fontos-fogalmai",
    "href": "02_alapfogalmak.html#a-fejezet-fontos-fogalmai",
    "title": "2  Alapfogalmak",
    "section": "",
    "text": "hálózat / gráf\n\ncsúcsok és élek együttese\n\ncsúcs / csomópont\n\ntetszőleges egyed, személy, tárgy vagy fogalom\n\nél / kapcsolat / link\n\nKét csúcs közötti kapcsolat. Az élek lehetnek irányítottak és irányítatlanok.\n\nirányított él\n\nolyan él, amely határozottan egyik csúcsból a másik csúcsba mutató kapcsolatot reprezentál, például weboldalak között a linkek.\n\nirányítatlan él\n\nolyan él, amely nem reprezentál egy irányba mutató kapcsolatot, a két csúcs ilyenkor oda-vissza irányba kapcsolódik egymáshoz.\n\nN\n\ncsúcsok száma a gráfban\n\nL\n\nélek száma a gráfban\n\nteljes gráf\n\nolyan gráf, amelynek minden csúcsa kapcsolódik az összes többi csúcshoz. Teljes gráfban \\(L=\\frac{N(N-1)}{2}\\)\n\nfokszám\n\negy csúcs fokszáma az csúcshoz kapcsolódó élek száma. Jele: \\(k\\)\n\nátlagos fokszám\n\nIrányítatlan hálózatban az egyes csúcsok fokszámait összeadjuk és osztjuk a csúcsok számával: \\(\\bar{k} = \\frac{k_1+k_2+\\dots+k_N}{N} = \\frac{2L}{N}\\). Irányított hálózatban külön vizsgáljuk a bejövő (\\(k_i^{be}\\)) és a kimenő éleket (\\(k_i^{ki}\\)). Egy csúcs összfokszáma: \\(k_i=k_i^{be} + k_i^{ki}\\). Irányított gráfban \\(\\bar{k^{be}} = \\frac{k_1^{be}+k_2^{be}+\\dots+k_N^{be}}{N}=\\frac{L}{N}\\), \\(\\bar{k^{ki}} = \\frac{k_1^{ki}+k_2^{ki}+\\dots+k_N^{ki}}{N}=\\frac{L}{N}\\)\n\nfokszámeloszlás\n\nannak a valószínűsége, hogy a gráfban egy véletlenszerűen kiválasztott pontnak éppen \\(k\\) legyen a fokszáma. Jelölése: \\(p_k\\). Véletlen gráfokban a fokszámeloszlás Poisson-eloszlást követ, skálafüggetlen hálózatokban hatványfüggvény szerinti eloszlást.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Alapfogalmak</span>"
    ]
  },
  {
    "objectID": "02_alapfogalmak.html#hálózatok-létrehozása",
    "href": "02_alapfogalmak.html#hálózatok-létrehozása",
    "title": "2  Alapfogalmak",
    "section": "2.2 Hálózatok létrehozása",
    "text": "2.2 Hálózatok létrehozása\nEbben a fejezetben tovább részletezzük a hálózatok létrehozását. A korábban látott R függvényeken túl, a következőkről lesz szó:\n\nas_adjacency_matrix() - igraph objektum szomszédsági mátrixszá alakítása\ngraph.adjacency() - igraph objektum létrehozása szomszédsági mátrixból\ngraph_from_literal() - igraph objektum létrehozása literálból\nmake_full_graph() - teljes gráfok készítése\nmake_ring() - gyűrű létrehozása.\nmake_star() - csillag létrehozása\nmake_tree() - fa létrehozása\n\nAlapvetően kétféle adatstruktúrából építhetünk hálózatot:\n\nélek listájából és\nszomszédsági mátrixból.\n\n\n2.2.1 Élek listája\nKorábban már láttuk, hogyan hozhatunk létre élek listájából gráfot. Most az elek_listaja_7.xlsx-ben rendeltünk össze 7 csúcsot 7 éllel.\n\ndf &lt;- rio::import(file = \"adat/elek_listaja_7.xlsx\")\ndf\n#&gt;   from to\n#&gt; 1    A  B\n#&gt; 2    A  C\n#&gt; 3    A  D\n#&gt; 4    A  E\n#&gt; 5    A  F\n#&gt; 6    E  F\n#&gt; 7    F  G\n\nKészítsük el és ábrázoljuk a fenti hálózatot.\n\nlibrary(igraph)\ng &lt;- graph.edgelist(as.matrix(df), directed = F)\nplot(g)\n\n\n\n\n\n\n\n\nA fontos információk könnyen lekérdezhetők.\n\nV(g)\n#&gt; + 7/7 vertices, named, from f261d85:\n#&gt; [1] A B C D E F G\nE(g)\n#&gt; + 7/7 edges from f261d85 (vertex names):\n#&gt; [1] A--B A--C A--D A--E A--F E--F F--G\n\nEgy létező gráf szomszédsági mátrixa könnyen meghatározható.\n\nas_adjacency_matrix(g) # igraph objektum szomszédsági mátrixszá alakítása\n#&gt; 7 x 7 sparse Matrix of class \"dgCMatrix\"\n#&gt;   A B C D E F G\n#&gt; A . 1 1 1 1 1 .\n#&gt; B 1 . . . . . .\n#&gt; C 1 . . . . . .\n#&gt; D 1 . . . . . .\n#&gt; E 1 . . . . 1 .\n#&gt; F 1 . . . 1 . 1\n#&gt; G . . . . . 1 .\n\nLátható, hogy irányítatlan gráfok esetében szimmetrikus a szomszédsági mátrix. Ott van 1-es, ahol a két csúcs között él vezet, és ott 0 (az egyszerűbb olvashatóság miatt pont), ahol nem.\n\n\n2.2.2 Szomszédsági mátrix\nKönnyen létrehozhatunk magunk is szomszédsági mátrixot, és abból igraph objektumot.\nElső esetben készítsünk 3 izolált csúcsból gráfot.\n\nnode_name &lt;- c(\"A\", \"B\", \"C\")  # csúcsok nevei\n# mátrix létrehozása\nm1 &lt;- matrix(data = c(0, 0, 0,\n                      0, 0, 0, \n                      0, 0, 0), \n             byrow = T,\n             nrow = length(node_name), ncol = length(node_name),\n             dimnames = list(node_name, node_name))\nm1\n#&gt;   A B C\n#&gt; A 0 0 0\n#&gt; B 0 0 0\n#&gt; C 0 0 0\n\n\n# gráf létrehozása\ng1 &lt;- graph.adjacency(m1, mode = \"undirected\")\nplot(g1) # gráf megrajzolása\n\n\n\n\n\n\n\n\nA 3 csúcsból kettő legyen összekötve\n\nnode_name &lt;- c(\"A\", \"B\", \"C\")  # csúcsok nevei\n# mátrix létrehozása\nm2 &lt;- matrix(data = c(0, 1, 0,\n                      1, 0, 0, \n                      0, 0, 0), \n             byrow = T,\n             nrow = length(node_name), ncol = length(node_name),\n             dimnames = list(node_name, node_name))\nm2\n#&gt;   A B C\n#&gt; A 0 1 0\n#&gt; B 1 0 0\n#&gt; C 0 0 0\n\n\n# gráf létrehozása\ng2 &lt;- graph.adjacency(m2, mode = \"undirected\")\nplot(g2) # gráf megrajzolása\n\n\n\n\n\n\n\n\nA 3 csúcsból két pár legyen összekötve\n\nnode_name &lt;- c(\"A\", \"B\", \"C\")  # csúcsok nevei\n# mátrix létrehozása\nm3 &lt;- matrix(data = c(0, 1, 0,\n                      1, 0, 1, \n                      0, 1, 0), \n             byrow = T,\n             nrow = length(node_name), ncol = length(node_name),\n             dimnames = list(node_name, node_name))\nm3\n#&gt;   A B C\n#&gt; A 0 1 0\n#&gt; B 1 0 1\n#&gt; C 0 1 0\n\n\n# gráf létrehozása\ng3 &lt;- graph.adjacency(m3, mode = \"undirected\")\nplot(g3) # gráf megrajzolása\n\n\n\n\n\n\n\n\nMinden csúcs össze legyen kötve.\n\nnode_name &lt;- c(\"A\", \"B\", \"C\")  # csúcsok nevei\n# mátrix létrehozása\nm4 &lt;- matrix(data = c(0, 1, 1,\n                      1, 0, 1, \n                      1, 1, 0), \n             byrow = T,\n             nrow = length(node_name), ncol = length(node_name),\n             dimnames = list(node_name, node_name))\nm4\n#&gt;   A B C\n#&gt; A 0 1 1\n#&gt; B 1 0 1\n#&gt; C 1 1 0\n\n\n# gráf létrehozása\ng4 &lt;- graph.adjacency(m4, mode = \"undirected\")\nplot(g4) # gráf megrajzolása\n\n\n\n\n\n\n\n\n\n\n2.2.3 Literális létrehozás\nKisebb hálózatok esetén nevekből is létrehozhatunk gráfot:\n\ngs1 &lt;- graph_from_literal(A, B, C);plot(gs1)\ngs2 &lt;- graph_from_literal(A-B, C);plot(gs2)\ngs3 &lt;- graph_from_literal(A-B-C);plot(gs3)\ngs4 &lt;- graph_from_literal(A-B-C, A-C);plot(gs4)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.2.4 Speciális gráfok\nSpeciális gráfok létrehozását is megkönnyíti az {igraph} csomag.\nTeljes gráfok készítése.\n\n# teljes gráfok készítése\nplot(make_full_graph(5, directed = FALSE, loops = FALSE))\nplot(make_full_graph(10, directed = FALSE, loops = FALSE))\nplot(make_full_graph(20, directed = FALSE, loops = FALSE))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGyűrű létrehozása.\n\n# gyűrű létrehozása\nplot(print_all(make_ring(5)))\n#&gt; IGRAPH f397e00 U--- 5 5 -- Ring graph\n#&gt; + attr: name (g/c), mutual (g/l), circular (g/l)\n#&gt; + edges from f397e00:\n#&gt; [1] 1--2 2--3 3--4 4--5 1--5\nplot(print_all(make_ring(10)))\n#&gt; IGRAPH f3992e8 U--- 10 10 -- Ring graph\n#&gt; + attr: name (g/c), mutual (g/l), circular (g/l)\n#&gt; + edges from f3992e8:\n#&gt;  [1] 1-- 2 2-- 3 3-- 4 4-- 5 5-- 6 6-- 7 7-- 8 8-- 9 9--10 1--10\nplot(print_all(make_ring(20)))\n#&gt; IGRAPH f39e3c1 U--- 20 20 -- Ring graph\n#&gt; + attr: name (g/c), mutual (g/l), circular (g/l)\n#&gt; + edges from f39e3c1:\n#&gt;  [1]  1-- 2  2-- 3  3-- 4  4-- 5  5-- 6  6-- 7  7-- 8  8-- 9 ...\n#&gt; [10] 10--11 11--12 12--13 13--14 14--15 15--16 16--17 17--18 ...\n#&gt; [19] 19--20  1--20\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCsillag létrehozása.\n\n# csillag létrehozása\nplot(make_star(5, mode = \"undirected\"))\nplot(make_star(10, mode = \"undirected\"))\nplot(make_star(20, mode = \"undirected\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFa létrehozása\n\n# fa létrehozása\nplot(make_tree(10, 3, mode = \"undirected\"))\nplot(make_tree(20, 3, mode = \"undirected\"))\nplot(make_tree(60, 3, mode = \"undirected\"))",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Alapfogalmak</span>"
    ]
  },
  {
    "objectID": "02_alapfogalmak.html#hálózat-attribútumai",
    "href": "02_alapfogalmak.html#hálózat-attribútumai",
    "title": "2  Alapfogalmak",
    "section": "2.3 Hálózat attribútumai",
    "text": "2.3 Hálózat attribútumai\nEbben a fejezetben további jellemzőkkel látjuk el a hálózatokat. A korábban látott R függvényeken túl, a következőkről lesz szó:\n\nvertex_attr() - csúcsok attribútumainak lekérdezése\nedge_attr() - élek attribútumainak lekérdezése\nset_vertex_attr() - csúcsok attribútumainak beállítása\nset_edge_attr()- élek attribútumainak beállítása\ngraph_from_data_frame() - gráf létrehozása attribútumokkal adattáblák alapján.\n\n\n2.3.1 Attribútumok hozzáadása\nEgy hálózatban a csúcsok és élek számos tulajdonsággal (vagy más néven attribútummal) rendelkezhetnek.\nA korábbi példában létrehozott g gráf egyetlen csúcs attribútummal rendelkezik. A csúcsok nevével vagy más néven címkéjével.\n\ng # az igraph objektum kiírása a képernyőre\n#&gt; IGRAPH f261d85 UN-- 7 7 -- \n#&gt; + attr: name (v/c)\n#&gt; + edges from f261d85 (vertex names):\n#&gt; [1] A--B A--C A--D A--E A--F E--F F--G\n\nA csúcsok és élek aktuális attribútumait könnyen meghatározhatjuk.\n\nvertex_attr(g) # csúcsok attribútumai\n#&gt; $name\n#&gt; [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\"\n\n\nedge_attr(g) # élek attribútumai (jelenleg üres)\n#&gt; named list()\n\nHa szeretnénk életkort hozzáadni minden csúcshoz, akkor a set_vertex_attr() függvényt használjuk.\n\ng &lt;- set_vertex_attr(graph = g, \n                     name = \"age\", \n                     value = c(20, 25, 21, 23, 24, 23, 22)\n                     )\n\nHa most ellenőrizzük a csúcsok jellemzőit, akkor már a neven kívül a kor attribútumot is láthatjuk a listában.\n\nvertex_attr(g) # csúcsok attribútumai\n#&gt; $name\n#&gt; [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\"\n#&gt; \n#&gt; $age\n#&gt; [1] 20 25 21 23 24 23 22\n\nHa szeretnénk a barátság erősségének egyfajta mérőszámaként a heti telefonhívások számt jellemzőként hozzáadni minden egyes élhez, akkor a set_edge_attr() függvényt használjuk.\n\ng &lt;- set_edge_attr(graph = g, \n                   name = \"frequency\", \n                   value = c(2, 1, 1, 1, 3, 2, 4)\n                   )\n\nHa most ellenőrizzük az élek jellemzőit, akkor már nem üres listát kapunk.\n\nedge_attr(g) # élek attribútumai\n#&gt; $frequency\n#&gt; [1] 2 1 1 1 3 2 4\n\nAz attribútumok meghatározása történhet a gráf létrehozásával egyidőben.\nHa előkészítettük az attribútumokkal rendelkező csúcsok és élek adattábláit, akkor a graph_from_data_frame() függvénnyel egy lépéyben is létrehozhatjuk a hálózatot.\n\nnodes_df &lt;- rio::import(file = \"adat/vertices_df_7.xlsx\")\nedges_df &lt;- rio::import(file = \"adat/edges_df_7.xlsx\")\n\ng_from_df &lt;- graph_from_data_frame(d = edges_df, vertices = nodes_df, directed = F)\n\n\nplot(g_from_df) # hálózat kirajzolása\n\n\n\n\n\n\n\n\n\nvertex_attr(g_from_df) # csúcsok attribútumai\n#&gt; $name\n#&gt; [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\"\n#&gt; \n#&gt; $age\n#&gt; [1] 20 25 21 23 24 23 22\nedge_attr(g_from_df) # élek attribútumai\n#&gt; $frequency\n#&gt; [1] 2 1 1 1 3 2 4\n\nAhogyan a fenti outputok is utalnak rá a csúcs és él attribútumok a dollárjeles ($) hivatkozással is elérhetők.\n\nV(g)$name  # a csúcsok 'name' attribútuma\n#&gt; [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\"\nV(g)$age # a csúcsok 'age' attribútuma\n#&gt; [1] 20 25 21 23 24 23 22\nE(g)$frequency # az élek 'frequency' attribútuma\n#&gt; [1] 2 1 1 1 3 2 4\n\n\n\n2.3.2 Élek szűrése\nKülönösen nagy hálózatok esetében fontos lehet a számunkra érdekes élek lekérdezése vagy szűrése. A dupla szögletes zárójelet ([[) használhatjuk a kívánt élek eléréséhez. Az .inc() segítségével a csúcsok nevére tehetünk megszorítást, de egyszerűen használhatjuk az élek egyes attribútumait is.\n\nE(g)[[.inc('E')]] # azon élek leszűrése, ahol az egyik csúcs az 'E'\n#&gt; + 2/7 edges from f261d85 (vertex names):\n#&gt;   tail head tid hid frequency\n#&gt; 4    A    E   1   5         1\n#&gt; 6    E    F   5   6         2\n\n\nE(g)[[frequency &gt;= 3]] # azon élek leszűrése, ahol az élek frequency attribútuma legalább 3\n#&gt; + 2/7 edges from f261d85 (vertex names):\n#&gt;   tail head tid hid frequency\n#&gt; 5    A    F   1   6         3\n#&gt; 7    F    G   6   7         4\n\n\n2.3.2.1 Feladat\n\nA friends.xlsx éleket tartalmazó adattáblája alapján hozzunk létre egy új gráfot, majd az egyes csúcsokhoz rendre adjuk hozzá a következő attribútumokat:\n\ngenders: “M”, “F”, “F”, “M”, “M”, “M”, “F”, “M”, “M”, “F”, “M”, “F”, “M”, “F”, “M”, “M”\nages: 18, 19, 21, 20, 22, 18, 23, 21, 22, 20, 20, 22, 21, 18, 19, 20\n\nAz egyes élekhez adjuk hozzá, hogy a barátok hetente hány órát töltenek együtt, melyek rendre:\n\nhours: 1, 2, 2, 1, 2, 5, 5, 1, 1, 3, 2, 1, 1, 5, 1, 2, 4, 1, 3, 1, 1, 1, 4, 1, 3, 3, 4.\n\nEzt követően kérdezzük le a csúcsok attribútumait, valamint az első 5 csúcs nevét. Majd az élek attribútumait, valamint a Britt-et tartalmazó éleket, és azokat a barátokat, akik legalább 4 órát töltenek együtt hetente.\n\nAdatok beolvasása, előkészítése:\n\nfriends_edges_df &lt;- rio::import(file = \"adat/friends.xlsx\")\n\n# nemre vonatkozó információ \ngenders &lt;- c(\"M\", \"F\", \"F\", \"M\", \"M\", \"M\", \"F\", \"M\", \"M\", \"F\", \"M\", \"F\", \"M\", \"F\", \"M\", \"M\")\n\n# életkorra vonatkozó információ\nages &lt;- c(18, 19, 21, 20, 22, 18, 23, 21, 22, 20, 20, 22, 21, 18, 19, 20)\n\nGráf létrehozása:\n\n# mátrixszá alakítjuk\nfriends_edges_mat &lt;- as.matrix(friends_edges_df)\n\n# igraph objektum létrehozása\nfriends_g &lt;- graph.edgelist(friends_edges_mat, directed = FALSE)\n\nCsúcsokra vonatkozó utasítások:\n\n# Létrehozunk egy 'gender' nevű új attribútumot a csúcsokhoz\nfriends_g &lt;- set_vertex_attr(friends_g, \"gender\", value = genders)\n\n# Létrehozunk egy 'age' nevű új attribútumot a csúcsokhoz\nfriends_g &lt;- set_vertex_attr(friends_g, \"age\", value = ages)\n\n# A csúcsok összes attribútumának lekérdezése, lista output\nvertex_attr(friends_g)\n#&gt; $name\n#&gt;  [1] \"Jessie\"  \"Sidney\"  \"Britt\"   \"Donnie\"  \"Karl\"    \"Berry\"  \n#&gt;  [7] \"Rene\"    \"Shayne\"  \"Elisha\"  \"Whitney\" \"Odell\"   \"Lacy\"   \n#&gt; [13] \"Eugene\"  \"Jude\"    \"Rickie\"  \"Tommy\"  \n#&gt; \n#&gt; $gender\n#&gt;  [1] \"M\" \"F\" \"F\" \"M\" \"M\" \"M\" \"F\" \"M\" \"M\" \"F\" \"M\" \"F\" \"M\" \"F\" \"M\"\n#&gt; [16] \"M\"\n#&gt; \n#&gt; $age\n#&gt;  [1] 18 19 21 20 22 18 23 21 22 20 20 22 21 18 19 20\n\n# Az első 5 csúcs attribútumának lekérdezése, adattábla nézet\nV(friends_g)[[1:5]] \n#&gt; + 5/16 vertices, named, from f450434:\n#&gt;     name gender age\n#&gt; 1 Jessie      M  18\n#&gt; 2 Sidney      F  19\n#&gt; 3  Britt      F  21\n#&gt; 4 Donnie      M  20\n#&gt; 5   Karl      M  22\n\nÉlekre vonatkozó utasítások:\n\n# A barátok hetente hány órát töltenek együtt\nhours &lt;- c(1, 2, 2, 1, 2, 5, 5, 1, 1, 3, 2, 1, 1, 5, 1, 2, 4, 1, 3, 1, 1, 1, 4, 1, 3, 3, 4)\n\n# Él attribútum (`hours`) hozzáadása\nfriends_g &lt;- set_edge_attr(friends_g, \"hours\", value = hours)\n\n# Az él attribútumok megjelenítése\nedge_attr(friends_g)\n#&gt; $hours\n#&gt;  [1] 1 2 2 1 2 5 5 1 1 3 2 1 1 5 1 2 4 1 3 1 1 1 4 1 3 3 4\n\n# Azon élek megjelenítése, amelyek tartalmazzák a \"Britt\" nevet\nE(friends_g)[[.inc('Britt')]]  \n#&gt; + 5/27 edges from f450434 (vertex names):\n#&gt;      tail    head tid hid hours\n#&gt; 2  Jessie   Britt   1   3     2\n#&gt; 3  Sidney   Britt   2   3     2\n#&gt; 7   Britt    Rene   3   7     5\n#&gt; 23  Britt    Lacy   3  12     4\n#&gt; 26  Britt Whitney   3  10     3\n\n# Az összes olyan él (barát) megjelenítése, akik hetente 4 óránál többet vagy 4 órát töltenek együtt\nE(friends_g)[[hours&gt;=4]]  \n#&gt; + 6/27 edges from f450434 (vertex names):\n#&gt;      tail    head tid hid hours\n#&gt; 6  Sidney    Rene   2   7     5\n#&gt; 7   Britt    Rene   3   7     5\n#&gt; 14   Rene Whitney   7  10     5\n#&gt; 17   Rene    Lacy   7  12     4\n#&gt; 23  Britt    Lacy   3  12     4\n#&gt; 27   Karl   Tommy   5  16     4\n\n\n\n\n2.3.3 Hálózat megjelenítése\nA hálózatok megjelenítésén is fejleszthetünk a csúcsra vonatkozó attribútumok segítségével.\nAdjunk egy új color attribútumot a csúcsokhoz. Minden csúcs színe vagy piros vagy fehér lesz az életkortól függően.\n\nV(g)$color &lt;- ifelse(V(g)$age &gt; 22, \"red\", \"white\") \n\nA plot() függvény felhasználja ezt az információt (a V8g)$color-t), de alapértelmezett (minden csúcsra vonatkozó) értékeket is beállíthatunk.\n\nplot(g, vertex.label.color=\"black\")\n\n\n\n\n\n\n\n\nA hálózatok megjelenése során a legfontosabb paraméterek:\n\ncsúcsok esetében:\n\nméret (például több kapcsolattal rendelkező csúcsok nagyobb méretben jelennek meg)\ncímke (jelentős csúcsok azonosítása, de a sok szöveg zavaró lehet)\nszín (különböző kategóriák megjelenése, például nem)\nforma (különböző kategóriák megjelenése, például nem)\n\nélek esetében:\n\nvastagság (az él súlya, fontossága)\nszín (kapcsolat kategorikus jellemzője)\nvonal típusa (kapcsolat kategorikus jellemzője).\n\n\nA fentieken túl az {igraph} csomag számos elrendezést kínál a megjelenítés során, amelyek a legoptimálisabb vizualizációt biztosíthatják. Ezek mindegyike biztosítja:\n\nminimalizálja az élek kereszteződését\na csúcsok nem lapolják át egymást\naz élek hossza egyenlő, amennyire lehet\na gráf legyen szimmetrikus, amennyire lehet\na nagyobb hatású csúcsok legyenek a középpontban\n\nHa szeretnénk speciális elrendezést választani, akkor a layout= argumentumot kell használnunk a plot() függvényben.\n\nplot(g, layout = layout_in_circle(g))\n\n\n\n\n\n\n\n\n\nplot(g, layout = layout_with_fr(g))\n\n\n\n\n\n\n\n\n\nplot(g, layout = layout_with_kk(g))\n\n\n\n\n\n\n\n\n\nplot(g, layout = layout_on_grid(g))\n\n\n\n\n\n\n\n\n\nplot(g, layout = layout_with_lgl(g))\n\n\n\n\n\n\n\n\n\nplot(g, layout = layout_as_tree(g))\n\n\n\n\n\n\n\n\nA legtöbb esetben a layout_nicely() megfelelő választás, amely maga választja ki az optimális megjelenést.\n\nplot(g, layout = layout_nicely(g))\n\n\n\n\n\n\n\n\n\n2.3.3.1 Feladat\n\nHozzunk létre adattáblákból egy hálózatot. A friends2_edges_df.xlsx az éleket, a friends2_nodes_df.xlsx a csúcsokat tartalmazza, mindkét adattábla &gt;tartalmaz attribútumokat is (az éleknél az hours (az egymással töltött heti óraszám), a csúcsoknál a gender (nem)).\n\nKérdezzük le az összes olyan élt (barátot), akik hetente 5 óránál többet vagy 5 órát töltenek együtt.\nMegjelenítéshez a csúcsok színét állítsuk be \"orange\", illetve \"dodgerblue\" színekre.\nPróbáljuk ki a körhálózatot, a Fruchterman-Reingold elrendezésű hálózatot, a faszerkezet megjelenítését és a legjobban illeszkedő megjelenítést.\nMódosítsuk a hálózat éleinek vastagságát a súlyuk alapján. A súly legyen az együtt töltött órák száma. A plot() függvényben használjuk a &gt;edge.width= argumentumot.\nHozzunk létre egy új gráfobjektumot a meglévő alapján. Az új gráf minden éle két óránál nagyobb súlyú lesz. Ez a delete_edges() használatával &gt;valósítható meg, amely két argumentumból áll. Az első a gráfobjektum, a második pedig az eltávolítandó élek részhalmaza. Ebben az esetben eltávolít &gt;minden olyan élt, amelynek értéke kevesebb, mint két óra.\n\n\nGráf létrehozása:\n\nfriends2_edges_df &lt;- rio::import(file = \"adat/friends2_edges_df.xlsx\")\nfriends2_nodes_df &lt;- rio::import(file = \"adat/friends2_nodes_df.xlsx\")\n\n# igraph objektum létrehozása attributumok felvitelével együtt\nfriends2_g &lt;- graph_from_data_frame(d = friends2_edges_df, vertices = friends2_nodes_df, directed = FALSE)\n\nKérdezzük le az összes olyan élt (barátot), akik hetente 5 óránál többet vagy 5 órát töltenek együtt:\n\n# Az összes olyan él (barát) megjelenítése, akik hetente 5 óránál többet vagy 5 órát töltenek együtt\nE(friends2_g)[[hours &gt;= 5]]\n#&gt; + 4/25 edges from f4dde4a (vertex names):\n#&gt;         tail      head tid hid hours\n#&gt; 5     Kelley Valentine   3   6     5\n#&gt; 8     Ronald   Jasmine   4   8     5\n#&gt; 12 Valentine     Perry   6  15     5\n#&gt; 15   Jasmine      Juan   8   9     6\n\nMegjelenítéshez a csúcsok színét állítsuk be \"orange\", illetve \"dodgerblue\" színekre:\n\n# A csúcsok színének beállítása nem alapján\nV(friends2_g)$color &lt;- ifelse(V(friends2_g)$gender == \"F\", \"orange\", \"dodgerblue\")\n\n\n# Az igraph ábra megjelenítése\nplot(friends2_g, vertex.label.color = \"black\")\n\n\n\n\n\n\n\n\nPróbáljuk ki a körhálózatot, a Fruchterman-Reingold elrendezésű hálózatot, a faszerkezet megjelenítését és a legjobban illeszkedő megjelenítést:\n\n# Körhálózat megjelenítése\nplot(friends2_g, vertex.label.color = \"black\", layout = layout_in_circle(friends2_g))\n\n\n\n\n\n\n\n\n\n# Fruchterman-Reingold elrendezésű hálózat\nplot(friends2_g, vertex.label.color = \"black\", layout = layout_with_fr(friends2_g))\n\n\n\n\n\n\n\n\n\n# Faszerkezet megjelenítése\nm &lt;- layout_as_tree(friends2_g)\nplot(friends2_g, vertex.label.color = \"black\", layout = m)\n\n\n\n\n\n\n\n\n\n# a legjobban illeszkedő megjelenítés\nm1 &lt;- layout_nicely(friends2_g)\nplot(friends2_g, vertex.label.color = \"black\", layout = m1)\n\n\n\n\n\n\n\n\nMódosítsuk a hálózat éleinek vastagságát a súlyuk alapján. A súly legyen az együtt töltött órák száma. A plot() függvényben használjuk a edge.width= argumentumot.\n\n# Hozzunk létre egy `w1` vektort élsúlyozásokból a barátok együtt töltött órák száma alapján.\nw1 &lt;- E(friends2_g)$hours\n\n# Ábrázoljuk a hálózatot úgy, hogy az `edge.width=` az imént létrehozott súlyvektorra legyen beállítva. \n# Az edge.color = 'black' használata biztosítja, hogy minden él fekete legyen.\nm1 &lt;- layout_nicely(friends2_g)\nplot(friends2_g, \n        vertex.label.color = \"black\", \n        edge.color = 'black',\n        edge.width = w1,\n        layout = m1)\n\n\n\n\n\n\n\n\nHozzunk létre egy új gráfobjektumot a meglévő alapján. Az új gráf minden éle két óránál nagyobb súlyú lesz. Ez a delete_edges() használatával valósítható meg, amely két argumentumból áll. Az első a gráfobjektum, a második pedig az eltávolítandó élek részhalmaza. Ebben az esetben eltávolít minden olyan élt, amelynek értéke kevesebb, mint két óra.\n\n# új gráf létrehozása élek törlésével\nfriends2_g2 &lt;- delete_edges(friends2_g, E(friends2_g)[hours &lt; 2])\n\n\n# Végül rajzoljuk meg az új `friends2_g2` hálózatot az élszélességek és az elrendezés megfelelő vektorával.\nw2 &lt;- E(friends2_g2)$hours\nm2 &lt;- layout_nicely(friends2_g2)\n\nplot(friends2_g2, \n     vertex.label.color = \"black\", \n     edge.color = 'black',\n     edge.width = w2,\n     layout = m2)\n\n\n\n\n\n\n\n\n\n\n2.3.3.2 Feladat\n\nHozzuk létre a következő gráfot, írassuk ki a szomszédsági mátrixát, a degree() függvénnyel a fokszámokat, az átlagos fokszámot és a degree.distribution() függvénnyel a fokszámeloszlást.\n\n\n\n\n\n\n\n\n\n\nHozzuk létre a fenti irányítatlan gráfot az élek listájából:\n\nfriends &lt;- tribble(\n                ~name1,   ~name2,\n                1, 2,\n                1, 3,\n                2, 3,\n                2, 4\n)\nfriends.mat &lt;- as.matrix(friends)\ng &lt;- graph.edgelist(friends.mat, directed = FALSE)\n\nA hálózat megjelenítése:\n\nplot(g)\n\n\n\n\n\n\n\n\nSzomszédsági mátrix:\n\nas_adjacency_matrix(g)\n#&gt; 4 x 4 sparse Matrix of class \"dgCMatrix\"\n#&gt;             \n#&gt; [1,] . 1 1 .\n#&gt; [2,] 1 . 1 1\n#&gt; [3,] 1 1 . .\n#&gt; [4,] . 1 . .\n\nA gráf lekérdezése:\n\nV(g) # a csúcsok száma és megnevezése\n#&gt; + 4/4 vertices, from f5e16f2:\n#&gt; [1] 1 2 3 4\nE(g) # az élek száma és az élek azonosítása csúcsokkal\n#&gt; + 4/4 edges from f5e16f2:\n#&gt; [1] 1--2 1--3 2--3 2--4\nvcount(g) # élek száma\n#&gt; [1] 4\necount(g) # csúcsok száma\n#&gt; [1] 4\n\nAz egyes csúcsok fokszámai:\n\ndegree(g) \n#&gt; [1] 2 3 2 1\n\nA fokszámok átlaga:\n\nmean(degree(g)) \n#&gt; [1] 2\n\nA fokszámeloszlás:\n\ndegree.distribution(g) \n#&gt; [1] 0.00 0.25 0.50 0.25",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Alapfogalmak</span>"
    ]
  },
  {
    "objectID": "02_alapfogalmak.html#königsbergi-hidak-problémája---1736",
    "href": "02_alapfogalmak.html#königsbergi-hidak-problémája---1736",
    "title": "2  Alapfogalmak",
    "section": "2.4 Königsbergi hidak problémája - 1736",
    "text": "2.4 Königsbergi hidak problémája - 1736\nHaladjunk át minden hídon de csak pontosan egyszer. Részletek.\nKét szempontból fontos:\n\nbizonyos problémák megoldása egyszerűbb, ha gráfként ábrázoljuk őket\naz adott gráf belső tulajdonságai meghatározóak lehetnek\n\n\nlibrary(tidyverse)\nfriends &lt;- tribble(\n                ~name1,   ~name2,\n                \"A\",\"B\",\n                \"A\",\"C\", \n                \"A\",\"D\",\n                \"B\",\"A\",\n                \"B\",\"D\",\n                \"C\",\"A\",\n                \"C\",\"D\"\n)\nhead(friends) # az első 6 sor\n#&gt; # A tibble: 6 × 2\n#&gt;   name1 name2\n#&gt;   &lt;chr&gt; &lt;chr&gt;\n#&gt; 1 A     B    \n#&gt; 2 A     C    \n#&gt; 3 A     D    \n#&gt; 4 B     A    \n#&gt; 5 B     D    \n#&gt; 6 C     A\n\n\n# install.packages(\"igraph\")\nlibrary(igraph)\n\n# mátrixszá alakítjuk\nfriends.mat &lt;- as.matrix(friends)\n\n# igraph objektum létrehozása\ng &lt;- graph.edgelist(friends.mat, directed = FALSE)\n\nHogyan jeleníthetjük meg a hálózatot?\n\n# A hálózat megjelenítése\nplot(g)\n\n\n\n\n\n\n\n\n\nhas_eulerian_path(g)\n#&gt; [1] FALSE\nhas_eulerian_cycle(g)\n#&gt; [1] FALSE\n\n\n1875-ben a B és C terület között új hidat építettek, így pontosan 2 páratlan fokszámú csúcs keletkezett, és a probléma megoldhatóvá vált.\n\n\nlibrary(tidyverse)\nfriends &lt;- tribble(\n                ~name1,   ~name2,\n                \"A\",\"B\",\n                \"A\",\"C\", \n                \"A\",\"D\",\n                \"B\",\"A\",\n                \"B\",\"D\",\n                \"C\",\"A\",\n                \"C\",\"D\",\n                \"B\",\"C\"\n)\nhead(friends) # az első 6 sor\n#&gt; # A tibble: 6 × 2\n#&gt;   name1 name2\n#&gt;   &lt;chr&gt; &lt;chr&gt;\n#&gt; 1 A     B    \n#&gt; 2 A     C    \n#&gt; 3 A     D    \n#&gt; 4 B     A    \n#&gt; 5 B     D    \n#&gt; 6 C     A\n\n\n# install.packages(\"igraph\")\nlibrary(igraph)\n\n# mátrixszá alakítjuk\nfriends.mat &lt;- as.matrix(friends)\n\n# igraph objektum létrehozása\ng &lt;- graph.edgelist(friends.mat, directed = FALSE)\n\nHogyan jeleníthetjük meg a hálózatot?\n\n# A hálózat megjelenítése\nplot(g)\n\n\n\n\n\n\n\n\n\nhas_eulerian_path(g)\n#&gt; [1] TRUE\nhas_eulerian_cycle(g)\n#&gt; [1] FALSE\neulerian_path(g)\n#&gt; $epath\n#&gt; + 8/8 edges from f64a9cb (vertex names):\n#&gt; [1] A--B A--B A--C A--C A--D B--D B--C C--D\n#&gt; \n#&gt; $vpath\n#&gt; + 9/4 vertices, named, from f64a9cb:\n#&gt; [1] A B A C A D B C D",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Alapfogalmak</span>"
    ]
  },
  {
    "objectID": "03_fontos_csucsok.html",
    "href": "03_fontos_csucsok.html",
    "title": "3  Fontos csúcsok",
    "section": "",
    "text": "3.1 A fejezet fogalmai",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Fontos csúcsok</span>"
    ]
  },
  {
    "objectID": "03_fontos_csucsok.html#a-fejezet-fogalmai",
    "href": "03_fontos_csucsok.html#a-fejezet-fogalmai",
    "title": "3  Fontos csúcsok",
    "section": "",
    "text": "vonal\n\negymáshoz kapcsolódó élek tetszőleges sorozata\n\nzárt vonal\n\nolyan vonal, ahol az első él kezdőcsúcsa megegyezik az utolsó él végpontjával\n\nséta\n\nolyan vonal, amelyben minden él különböző\n\nút (path)\n\nolyan vonal, amelyben minden csúcs (és így persze minden él is) különböző\n\nkör\n\nolyan vonal, amelyben a kezdőpont megegyezik a végponttal, de ettől eltekintve minden pont különböző\n\nHamilton kör\n\na gráf minden pontját tartalmazó kör\n\nHamilton út\n\na gráf minden pontját tartalmazó út\n\nvonal / út hossza\n\na vonalon / úton szereplő élek száma\n\nhálózat átmérője\n\na hálózat leghosszabb útja\n\ncentralitás (központiság)\n\na csúcs fontosságát leíró számszerű mutató",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Fontos csúcsok</span>"
    ]
  },
  {
    "objectID": "03_fontos_csucsok.html#irányított-gráfok",
    "href": "03_fontos_csucsok.html#irányított-gráfok",
    "title": "3  Fontos csúcsok",
    "section": "3.2 Irányított gráfok",
    "text": "3.2 Irányított gráfok\nA fejezetben használt {igraph} függvények:\n\nis.directed() - a gráf irányítottságát vizsgáló függvény\nis.weighted() - a gráf súlyozottságát vizsgáló függvény\nhead_of() - minden olyan csúcs lekérdezése, amely a paraméterben megadott élek végpontja\ntail_of() - függvény a paraméterben szereplő élek kezdőpontját adja meg\nincident() - azon élek listája, amelyek a paraméterben szereplő csúcsokat érinti\n\nKönnyen létrehozhatunk irányított gráfot adattáblából. Egy gráfobjektum lehet irányított vagy irányítatlan és az élek lehetnek súlyozottak vagy súlyozatlanok.\nPéldaként a kanyaró terjedésének hálózatát fogjuk használni. Az adatok a németországi Hagelloch városából származnak 1861-ből. A hálózat minden egyes irányított éle azt jelzi, hogy egy gyermek megfertőződött kanyaróval, miután kapcsolatba került egy fertőzött gyermekkel.\nAdatok beolvasása.\n\n# adattábla létrehozása\nmeasles &lt;- rio::import(file = \"adat/measles.csv\")\nhead(measles) # az adattábla első 6 sora\n#&gt;   from to\n#&gt; 1   45  1\n#&gt; 2   45  2\n#&gt; 3  172  3\n#&gt; 4  180  4\n#&gt; 5   45  5\n#&gt; 6  180  6\n\nHozzuk létre az igraph objektumot, vagyis a hálózatot.\n\nlibrary(igraph)\n# igraph objektum létrehozása\ng &lt;- graph_from_data_frame(d = measles, directed = TRUE)\n\nJelenítsük meg a hálózatot a plot() segítségével. Ezt a megjelenítést később javítani fogjuk. Hasznos lehet a hálózat megjelenítése az elemzés előtt. A hálózat láthatóságát javítja, ha kezdetben a csúcsméretet 0 (vertex.size = 0), az él nyíl mérete pedig 0,1 (edge.arrow.size = 0.2).\n\n# induló megjelenés\nplot(g, \n     vertex.label.color = \"black\", \n     edge.color = 'gray77',\n     vertex.size = 0,\n     edge.arrow.size = 0.2,\n     layout = layout_nicely(g))\n\n\n\n\n\n\n\n\nVizsgáljuk meg, hogy a hálózat irányított vagy sem. Ehhez a is.directed() függvényt használjuk. A visszatérési érték TRUE vagy FALSE.\n\n# a gráf irányított?\nis.directed(g)\n#&gt; [1] TRUE\n\nAmennyiben a g igraph objektumot kiíratjuk a képernyőre, akkor is felismerhetjük, hogy irányított gráfról van szó. Egyrészt a nyilakkal reprezentált élek, másrészt az első sorban szereplő DN jelzi a gráf irányítottságát.\n\ng # igrapgh objektum kiírása a képernyőre\n#&gt; IGRAPH f8e9827 DN-- 187 184 -- \n#&gt; + attr: name (v/c)\n#&gt; + edges from f8e9827 (vertex names):\n#&gt;  [1] 45 -&gt;1  45 -&gt;2  172-&gt;3  180-&gt;4  45 -&gt;5  180-&gt;6  42 -&gt;7 \n#&gt;  [8] 45 -&gt;8  182-&gt;9  45 -&gt;10 182-&gt;11 45 -&gt;12 12 -&gt;13 181-&gt;14\n#&gt; [15] 45 -&gt;15 181-&gt;16 181-&gt;17 175-&gt;18 181-&gt;19 181-&gt;20 181-&gt;21\n#&gt; [22] 45 -&gt;22 45 -&gt;23 22 -&gt;24 22 -&gt;25 45 -&gt;26 10 -&gt;27 180-&gt;28\n#&gt; [29] 31 -&gt;29 45 -&gt;30 45 -&gt;31 45 -&gt;32 45 -&gt;33 181-&gt;34 182-&gt;35\n#&gt; [36] 34 -&gt;36 182-&gt;37 17 -&gt;38 45 -&gt;39 93 -&gt;40 180-&gt;41 178-&gt;42\n#&gt; [43] 42 -&gt;43 45 -&gt;44 184-&gt;45 45 -&gt;46 45 -&gt;47 10 -&gt;48 17 -&gt;49\n#&gt; [50] 8  -&gt;50 31 -&gt;51 17 -&gt;52 17 -&gt;53 17 -&gt;54 17 -&gt;55 45 -&gt;56\n#&gt; + ... omitted several edges\n\nAmennyiben súlyozott éleket tartalmazó gráfról van szó, akkor az is.weighted() függvénnyel meggyőződhetünk ennek tényéről.\n\nis.weighted(g) # a gráf élei súlyozottak\n#&gt; [1] FALSE\n\nSúlyozott éleket tartalmaz az a gráf, amelynek az élei tartalmaznak weight attribútumot.\n\ng2 &lt;- g\n# véletlen súlyok hozzárendelése\nE(g2)$weight &lt;- sample(x = c(1,2), size = gsize(g2), replace = T)\nis.weighted(g2) # a gráf élei súlyozottak\n#&gt; [1] TRUE\n\nAz élek súlyozottsága a g2 igraph objektum kilistázásából is látható.\n\ng2 # g2 kiírása\n#&gt; IGRAPH f8e9827 DNW- 187 184 -- \n#&gt; + attr: name (v/c), weight (e/n)\n#&gt; + edges from f8e9827 (vertex names):\n#&gt;  [1] 45 -&gt;1  45 -&gt;2  172-&gt;3  180-&gt;4  45 -&gt;5  180-&gt;6  42 -&gt;7 \n#&gt;  [8] 45 -&gt;8  182-&gt;9  45 -&gt;10 182-&gt;11 45 -&gt;12 12 -&gt;13 181-&gt;14\n#&gt; [15] 45 -&gt;15 181-&gt;16 181-&gt;17 175-&gt;18 181-&gt;19 181-&gt;20 181-&gt;21\n#&gt; [22] 45 -&gt;22 45 -&gt;23 22 -&gt;24 22 -&gt;25 45 -&gt;26 10 -&gt;27 180-&gt;28\n#&gt; [29] 31 -&gt;29 45 -&gt;30 45 -&gt;31 45 -&gt;32 45 -&gt;33 181-&gt;34 182-&gt;35\n#&gt; [36] 34 -&gt;36 182-&gt;37 17 -&gt;38 45 -&gt;39 93 -&gt;40 180-&gt;41 178-&gt;42\n#&gt; [43] 42 -&gt;43 45 -&gt;44 184-&gt;45 45 -&gt;46 45 -&gt;47 10 -&gt;48 17 -&gt;49\n#&gt; [50] 8  -&gt;50 31 -&gt;51 17 -&gt;52 17 -&gt;53 17 -&gt;54 17 -&gt;55 45 -&gt;56\n#&gt; + ... omitted several edges\n\nSúlyozott gráf megjelenítéséhez használjuk a edge.width = E(g2)$weight paramétert a plot() függvényben.\n\nplot(g2, \n     vertex.label.color = \"black\", \n     edge.color = 'grey77',\n     vertex.size = 0,\n     edge.arrow.size = 0.2,\n     layout = layout_nicely(g),\n     edge.width = E(g2)$weight\n     )\n\n\n\n\n\n\n\n\n\n3.2.1 Az élek végpontjai\nIrányítatlan gráfok esetében, ha e egy él és az a, b csúcsok össze vannak kötve, akkor az a és b az e él végpontjai, míg irányított gráfban a-&gt;b irányított él esetén az a csúcs az e kezdőpontja (vagy töve) és b a végpontja (vagy feje).\nIrányított gráfban a head_of() segítségével minden olyan csúcsot lekérdezhetünk, amely a paraméterben megadott élek végpontja. A tail_of() függvény a paraméterben szereplő élek kezdőpontját adja meg. A head_of() függvény tehát két argumentumot tartalmaz, az első a gráfobjektum, a második pedig az élek halmaza. Ha az összes élt el akarjuk érni, akkor az E(g)-t használjuk.\n\nho_g &lt;- head_of(g, E(g)) # a gráf összes élének végpontja\nho_g\n#&gt; + 184/187 vertices, named, from f8e9827:\n#&gt;   [1] 1   2   3   4   5   6   7   8   9   10  11  12  13  14 ...\n#&gt;  [16] 16  17  18  19  20  21  22  23  24  25  26  27  28  29 ...\n#&gt;  [31] 31  32  33  34  35  36  37  38  39  40  41  42  43  44 ...\n#&gt;  [46] 46  47  48  49  50  51  52  53  54  55  56  57  58  59 ...\n#&gt;  [61] 61  62  63  64  65  66  67  68  69  70  71  72  73  74 ...\n#&gt;  [76] 76  77  78  79  80  81  82  83  84  85  86  87  88  89 ...\n#&gt;  [91] 91  92  93  94  95  96  97  98  99  100 101 102 103 104...\n#&gt; [106] 106 107 108 109 110 111 112 113 114 115 116 117 118 119...\n#&gt; [121] 121 122 123 124 125 126 127 128 129 130 131 132 133 134...\n#&gt; [136] 136 137 138 139 140 142 143 144 145 146 147 148 149 150...\n#&gt; + ... omitted several vertices\n\nHasonlóan használhatjuk a tail_of() függvényt azon csúcsok meghatározására, amelyekből él indul ki:\n\nto_g &lt;- tail_of(g, E(g)) # a gráf összes élének kezdőpontja\nto_g\n#&gt; + 184/187 vertices, named, from f8e9827:\n#&gt;   [1] 45  45  172 180 45  180 42  45  182 45  182 45  12  181...\n#&gt;  [16] 181 181 175 181 181 181 45  45  22  22  45  10  180 31 ...\n#&gt;  [31] 45  45  45  181 182 34  182 17  45  93  180 178 42  45 ...\n#&gt;  [46] 45  45  10  17  8   31  17  17  17  17  45  56  45  58 ...\n#&gt;  [61] 186 11  19  45  64  64  11  179 54  180 10  12  180 45 ...\n#&gt;  [76] 5   180 181 179 78  39  45  82  82  44  1   47  47  12 ...\n#&gt;  [91] 93  93  45  183 10  97  45  64  11  47  7   21  37  58 ...\n#&gt; [106] 42  19  106 12  18  34  21  31  78  16  45  116 116 116...\n#&gt; [121] 11  188 7   7   7   37  106 7   7   56  56  14  18  78 ...\n#&gt; [136] 17  16  34  4   6   145 145 145 45  172 18  14  39  148...\n#&gt; + ... omitted several vertices\n\nÉrdekességként keressük meg azokat az éleket, amelyekből indul ki él, de egy él sem vezet. A setdiff() függvény a halmazelméleti különbséget valósítja meg, egészen pontosan a gráf összes élének kezdőpontjából (to_g) kivonjuk a gráf összes élének végpontját (ho_g). Ha a csomópontok címkéivel akarjuk elvégezni a műveletet, akkor a name argumentumot is használjuk a különbségképzés során.\n\n# olyan csúcsok, amelyekbe nem vezet be él\nsetdiff(to_g$name, ho_g$name)\n#&gt; [1] \"184\" \"174\" \"173\"\n\nA fenti outputban látható, hogy 3 ilyen csúcsunk van. Amennyiben szeretnénk ezt a 3 csúcsot kiemelni a megjelenítés során, akkor a címkék színét állítsuk be.\n\n# alapértelmezés szerint minden címkéjének színe legyen fekete\nvlc &lt;- rep(\"black\", gorder(graph = g))\n# a megfelelő csúcsok címkéjének színe legyen piros\nvlc[V(g)$name %in% setdiff(to_g$name, ho_g$name)] &lt;- \"red\"\n\nplot(g2, \n     vertex.label.color = vlc, \n     edge.color = 'grey77',\n     vertex.size = 0,\n     edge.arrow.size = 0.2,\n     layout = layout_nicely(g)\n     )\n\n\n\n\n\n\n\n\n\n\n3.2.2 Adott csúcs éleinek azonosítása\nAz egyes élek azonosítása is lehetséges. Megvizsgálhatjuk, hogy létezik-e él két csúcs között, valamint megkereshetjük az összes olyan csúcsot, amelyek bármelyik irányban kapcsolódnak egy adott csúcshoz.\nElőször ellenőrizzük le, hogy vezet-e él egyik, illetve másik irányban a 184-es csúcs és a 178-as csúcs között. A csúcsok indexelésekor szögletes zárójelet ([) használjuk és a csúcs nevét idézőjelbe kell tenni, még akkor is, ha az szám. Ha az indexelés eredménye 1 (IGAZ), akkor az azt jelzi, akkor vezet irányított él. Ha 0-t (FALSE) kapunk, akkor nem vezet irányított él.\n\n# Van-e irányított él a 184-es csúcstól 178-as csúcshoz\ng['184', '178']\n#&gt; [1] 1\n\n\n# Van-e irányított él a 178-as csúcstól 184-es csúcshoz\ng['178', '184']\n#&gt; [1] 0\n\nAz incident() függvény segítségével azonosítjuk azokat az éleket, amelyek például a 184-es csúcsból bármelyik irányba mennek, vagy azokat, amelyek a 184-es csúcsból indulnak ki. Az első argumentum a gráf objektum, a második a vizsgálandó csúcs, a harmadik argumentum pedig a mód, amely az irányt jelzi.\n\n# Az összes olyan él, amiben a 184-es csúcs szerepel\nincident(g, '184', mode = \"all\")\n#&gt; + 6/184 edges from f8e9827 (vertex names):\n#&gt; [1] 184-&gt;45  184-&gt;182 184-&gt;181 184-&gt;178 184-&gt;183 184-&gt;177\n\n\n# Az összes olyan él, amely a 184-es csúcsból indul ki\nincident(g, '184', mode = \"out\")\n#&gt; + 6/184 edges from f8e9827 (vertex names):\n#&gt; [1] 184-&gt;45  184-&gt;182 184-&gt;181 184-&gt;178 184-&gt;183 184-&gt;177\n\n\n# Az összes olyan él, amely a 184-es csúcsba vezet\nincident(g, '184', mode = \"in\")\n#&gt; + 0/184 edges from f8e9827 (vertex names):\n\n\n3.2.2.1 Feladat\n\nHozzuk létre a következő gráfot, írassuk ki a szomszédsági mátrixát, a degree() függvénnyel a fokszámokat, az átlagos fokszámot és a degree.distribution() függvénnyel a fokszámeloszlást.\n\n\n\n\n\n\n\n\n\n\nHozzuk létre a fenti irányított gráfot:\n\nfriends &lt;- tribble(\n                ~name1,   ~name2,\n                1, 2,\n                3, 1,\n                3, 2,\n                2, 4\n)\nfriends.mat &lt;- as.matrix(friends)\ngs1 &lt;- graph.edgelist(friends.mat, directed = TRUE)\n# A hálózat megjelenítése\nplot(gs1)\n\n\n\n\n\n\n\n\nSzomszédsági mátrix:\n\nas_adjacency_matrix(gs1)\n#&gt; 4 x 4 sparse Matrix of class \"dgCMatrix\"\n#&gt;             \n#&gt; [1,] . 1 . .\n#&gt; [2,] . . . 1\n#&gt; [3,] 1 1 . .\n#&gt; [4,] . . . .\n\n\nV(gs1) # a csúcsok száma és megnevezése\n#&gt; + 4/4 vertices, from faa229f:\n#&gt; [1] 1 2 3 4\nE(gs1) # az élek száma és az élek azonosítása csúcsokkal\n#&gt; + 4/4 edges from faa229f:\n#&gt; [1] 1-&gt;2 3-&gt;1 3-&gt;2 2-&gt;4\necount(gs1) # élek száma\n#&gt; [1] 4\nvcount(gs1) # csúcsok száma\n#&gt; [1] 4\nis.directed(gs1) # irányított gráf?\n#&gt; [1] TRUE\n\nA csúcsok fokszáma, a bemenő és kimenő éleket külön-külön is számolva:\n\ndegree(gs1) \n#&gt; [1] 2 3 2 1\ndegree(gs1, mode = \"all\") \n#&gt; [1] 2 3 2 1\ndegree(gs1, mode = \"in\") \n#&gt; [1] 1 2 0 1\ndegree(gs1, mode = \"out\") \n#&gt; [1] 1 1 2 0\nd_degree &lt;- data.frame(degre_all=degree(gs1, mode = \"all\"),\n                       degre_in=degree(gs1, mode = \"in\"),\n                       degre_out=degree(gs1, mode = \"out\"))\nd_degree\n#&gt;   degre_all degre_in degre_out\n#&gt; 1         2        1         1\n#&gt; 2         3        2         1\n#&gt; 3         2        0         2\n#&gt; 4         1        1         0\n\nA fokszámok átlaga:\n\nmean(degree(gs1)) \n#&gt; [1] 2\n\nA fokszámeloszlás:\n\ndegree.distribution(gs1) \n#&gt; [1] 0.00 0.25 0.50 0.25",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Fontos csúcsok</span>"
    ]
  },
  {
    "objectID": "03_fontos_csucsok.html#csúcsok-közötti-kapcsolatok",
    "href": "03_fontos_csucsok.html#csúcsok-közötti-kapcsolatok",
    "title": "3  Fontos csúcsok",
    "section": "3.3 Csúcsok közötti kapcsolatok",
    "text": "3.3 Csúcsok közötti kapcsolatok\nA fejezetben használt {igraph} függvények:\n\nneighbors() - szomszédos csúcsok feltárása\nfarthest_vertices() - a hálózat átmérőjét meghatározó út első és utolsó csúcsa\nget_diameter() - megmutatja az útvonalat a két egymástól legtávolabbi csúcs között\ndiameter() - a hálózat átmérője\nego() - azok a csúcsok, amelyek egy adott csúcstól \\(N\\) kapcsolaton belül elérhetők\n\nA hálózatelemzés során a csúcsok közötti kapcsolatok mintázatának feltárása központi jelentőségű. Ennek egyik módja, hogy első lépésben azonosítjuk az egyes csúcsok szomszédos csúcsait, majd azt is meghatározhatjuk, hogy mely szomszédos csúcsokon osztoznak a nem összekapcsolt csúcsok. Ez utóbbi annak a lehetőségét mutatja meg, hogy két csúcsnak miként lehet közvetett kapcsolata más csúcsokon keresztül.\n\n3.3.1 Szomszédok\nA neighbors() függvény segítségével azonosíthatjuk azokat a csúcsokat, amelyek bármilyen módon kapcsolódnak például a 12-es csúcshoz, vagy azokat a csúcsokat, amelyek egy élt a 12-es csúcshoz irányítanak, és azokat is, amelyek a 12-es csúcsból indulnak.\n\n# irányítottságtól függetlenül a 12 csúcs szomszédai\nneighbors(g, '12', mode = \"all\")\n#&gt; + 5/187 vertices, named, from f8e9827:\n#&gt; [1] 45  13  72  89  109\n\n# a 12-es csúcsba futó élek kiinduló csúcsai\nneighbors(g, '12', mode = \"in\")\n#&gt; + 1/187 vertex, named, from f8e9827:\n#&gt; [1] 45\n\n# a 12-es csúcsból kifelé vezető élek\nneighbors(g, '12', mode = \"out\")\n#&gt; + 4/187 vertices, named, from f8e9827:\n#&gt; [1] 13  72  89  109\n\nMeghatározhatjuk azt is, hogy például a 42 és 124 csúcsoknak van-e közös szomszédjuk! Hozzunk létre egy n1 vektort azoknak a csúcsoknak, amelyekbe él vezet a 42-es csúcsból, és egy n2 vektort azoknak a csúcsoknak, amelyek egy élt a 124-es csúcshoz irányítanak. Ezután használjuk az intersection() függvényt, amely meghatározza, hogy vannak-e közös csúcsok az n1-ben és az n2-ben.\n\n# az összes olyan csúcs, amely a 42-es csúcsból induló élen végpont és egyben a 124-es csúcshoz irányuló élek kezdőcsúcsa\nn1 &lt;- neighbors(g, '42', mode = 'out')\nn2 &lt;- neighbors(g, '124', mode = 'in')\nintersection(n1, n2)\n#&gt; + 1/187 vertex, named, from f8e9827:\n#&gt; [1] 7\n\nLátható, hogy van egyetlen olyan csúcs (7), amelyen keresztül a 42-es csúcsból eljuthatunk a 124-es csúcsba.\n\n# alapértelmezés szerint minden címkéjének színe legyen fekete\nvlc &lt;- rep(\"black\", gorder(graph = g))\n# a megfelelő csúcsok címkéjének színe legyen piros\nvlc[V(g)$name %in% c('42', '7', '124')] &lt;- \"red\"\n\nplot(g2, \n     vertex.label.color = vlc, \n     edge.color = 'grey77',\n     vertex.size = 0,\n     edge.arrow.size = 0.2,\n     layout = layout_nicely(g)\n     )\n\n\n\n\n\n\n\n\n\n\n3.3.2 A csúcsok közötti távolságok\nEgy hálózat összekapcsoltságának egyik mutatója lehet, ha megállapítjuk az összes csúcspár közötti utak hosszát. Az út egyszerűen a csúcsok közötti kapcsolatok láncolata. A két csúcs közötti élek száma a csúcsok közötti távolságot jelenti. Ha egy csúcs elérhető a szomszédjától, akkor a köztük lévő úthossz 1, vagyis az egymáshoz kapcsolódó csúcsok távolsága 1. Azok a csúcsok, amelyeknek közös szomszédjuk van, de nem kapcsolódnak egymáshoz, a távolságuk 2 és így tovább. Irányított hálózatokban az élek iránya is figyelembe vehető. Ha két csúcsot nem lehet elérni egymást követő irányított éleken keresztül, akkor a távolság végtelen.\nA hálózatelemzés során általában az érdekel bennünket, hogy az adott hálózatban melyik a leghosszabb ilyen út. Ezt a hálózat átmérőjének is nevezik.\nElsőként vizsgáljuk meg a hálózat csúcsai közötti leghosszabb útvonalakat, majd azokat a csúcsokat keressük, amelyek egy adott csúcs \\(n\\) kapcsolatán belül vannak. A betegségátviteli hálózatok esetében (mint a példánkban szereplő kanyaró adatkészlet esetében) ez segít azonosítani, hogy milyen gyorsan terjed a betegség a hálózaton keresztül.\nA hálózat leghosszabb útvonalának hosszát a farthest_vertices() függvény segítségével kérhetjük el.\n\n# Melyik két csúcs van a legtávolabb egymástól a gráfban?\nfarthest_vertices(g) \n#&gt; $vertices\n#&gt; + 2/187 vertices, named, from f8e9827:\n#&gt; [1] 184 162\n#&gt; \n#&gt; $distance\n#&gt; [1] 5\n\nAz outputban megjelenik a megtalált út kezdő- és végpontja, valamint az út hossza is.\nAz út hosszát a diameter() függvény külön is megmutatja.\n\n# a hálózat átmérője\ndiameter(g)\n#&gt; [1] 5\n\nMagát az útvonalat is azonosíthatjuk a get_diameter() függvény segítségével. Ez az út összes csúcspontját tartalmazza, így esetünkben azt az utat mutatja, amely a legtávolabb lévő gyermekekhez vezet, akikhez a betegség eljutott a hálózaton keresztül.\n\n# Megmutatja az útvonalat a két egymástól legtávolabbi csúcs között\nget_diameter(g)  \n#&gt; + 6/187 vertices, named, from f8e9827:\n#&gt; [1] 184 178 42  7   123 162\n\nJelenítsük meg ezt az utat.\n\n# alapértelmezés szerint minden címkéjének színe legyen fekete\nvlc &lt;- rep(\"black\", gorder(graph = g))\n# a megfelelő csúcsok címkéjének színe legyen piros\nvlc[V(g)$name %in% get_diameter(g)$name] &lt;- \"red\"\n\nplot(g2, \n     vertex.label.color = vlc, \n     edge.color = 'grey77',\n     vertex.size = 0,\n     edge.arrow.size = 0.2,\n     layout = layout_nicely(g)\n     )\n\n\n\n\n\n\n\n\n\n\n3.3.3 N lépésben elérhető csúcsok azonosítása\nAz ego() függvény segítségével azonosítani tudjuk az összes olyan csúcsot, amely az adott csúcsból maximum \\(n\\) lépésben elérhető.\nPéldául az ego() segítségével keressük meg az összes olyan csúcsot, amely a 42-es csúcstól 2 távolságon belül elérhető, majd azokat, amelyek két távolságon belül elérhetik a 42-es csúcsot. Az ego() első argumentuma a gráfobjektum, a második argumentum a csúcsok közötti kapcsolatok maximális száma, a harmadik argumentum a kívánt csúcs, a negyedik argumentum pedig azt határozza meg, hogy kimenő vagy bejövő élről van szó.\n\n# Azok a csúcsok, amelyek a 42-es csúcstól két kapcsolaton belül elérhetők.\nego(g, 2, '42', mode = 'out')\n#&gt; [[1]]\n#&gt; + 13/187 vertices, named, from f8e9827:\n#&gt;  [1] 42  7   106 43  123 101 120 124 125 128 129 108 127\n\n# Azok a csúcsok, amelyek két kapcsolaton belül elérhetik a 42-es csúcsot.\nego(g, 2, '42', mode = 'in')\n#&gt; [[1]]\n#&gt; + 3/187 vertices, named, from f8e9827:\n#&gt; [1] 42  178 184\n\nAzok a csúcsok, amelyek a 42-es csúcstól két kapcsolaton belül elérhetők.\n\n# alapértelmezés szerint minden címkéjének színe legyen fekete\nvlc &lt;- rep(\"black\", gorder(graph = g))\n# a megfelelő csúcsok címkéjének színe legyen piros\nvlc[V(g)$name %in% ego(g, 2, '42', mode = 'out')[[1]]$name] &lt;- \"red\"\n\nplot(g2, \n     vertex.label.color = vlc, \n     edge.color = 'grey77',\n     vertex.size = 0,\n     edge.arrow.size = 0.2,\n     layout = layout_nicely(g)\n     )\n\n\n\n\n\n\n\n\nAzok a csúcsok, amelyek két kapcsolaton belül elérhetik a 42-es csúcsot.\n\n# alapértelmezés szerint minden címkéjének színe legyen fekete\nvlc &lt;- rep(\"black\", gorder(graph = g))\n# a megfelelő csúcsok címkéjének színe legyen piros\nvlc[V(g)$name %in% ego(g, 2, '42', mode = 'in')[[1]]$name] &lt;- \"red\"\n\nplot(g2, \n     vertex.label.color = vlc, \n     edge.color = 'grey77',\n     vertex.size = 0,\n     edge.arrow.size = 0.2,\n     layout = layout_nicely(g)\n     )",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Fontos csúcsok</span>"
    ]
  },
  {
    "objectID": "03_fontos_csucsok.html#fontos-és-befolyásos-csúcsok",
    "href": "03_fontos_csucsok.html#fontos-és-befolyásos-csúcsok",
    "title": "3  Fontos csúcsok",
    "section": "3.4 Fontos és befolyásos csúcsok",
    "text": "3.4 Fontos és befolyásos csúcsok\nA fejezetben használt {igraph} függvények:\n\ndegree() - fokszám centralitás kiszámítása az egyes csúcsokra\nbetweenness() - közöttiség centralitás kiszámítása az egyes csúcsokra\ncloseness() - közelség centralitás kiszámítása az egyes csúcsokra\nmake_ego_graph() - részgráf készítése egy csúcstól adott távolságra lévő csúcsokkal\ndistances() - a legrövidebb út két csúcs között\n\nA hálózatelemzésben különböző mérőszámok születtek a csúcsok fontosságának számszerűsítésére, ezeket centralitásnak vagy központiságnak nevezzük. Ezek segítségével olyan kérdésekre válaszolhatunk, hogy egy osztályközösségben ki a hangadó, mennyire értékes gey weboldal, mely gének törlése járhat hallos következménnyel egy génszabályozó hálózatban, mennyire kritikus az adott router egy internetes hálózatban.\nItt 3 centralitási mutatóról lesz szó:\n\nFokszám centralitás (degree centrality)\nKözöttiség centralitás (betweenness centrality)\nKözelség centralitás (closeness centrality)\n\nSzámos módszer létezik annak meghatározására, hogy mely csúcsok lehetnek a legfontosabbak vagy a legbefolyásosabbak. Például fontosnak tarthatunk egy olyan csúcsot, amelynek sok kapcsolata van, azaz magas a fokszáma van. Azokat a csúcsokat még nagyobb befolyásúnak tekinthetjük, amelyek olyan más csúcsokhoz kapcsolódnak, amelyek maguk is erősen összekapcsolódnak a hálózatban. Ezek olyan csúcsok, amelyek nagy sajátvektor-centralitásúak. Számos más módszer is létezik a befolyás kiszámítására, beleértve a közelség és a laprangsorok központiságát. A következő gyakorlatban ezek közül kettőre fogsz összpontosítani: a mértékre és a közöttiségre.\n\n3.4.1 Fokszám centralitás\nA csúcs fontosságának talán legegyszerűbb mértéke a csúcs foka. Egy csúcs kifoka (out-degree) azoknak a csúcsoknak a száma, amelyekre egy csúcsnak kimenő éle van. A befok (in-degree) a többi egyedtől ide vezető élek száma. A kanyaróhálózatban azok az egyének, akik sok más egyedet megfertőznek, magas kifokkal rendelkeznek.\nÉrdekes kérdés lehet, hogy az egyének azonos mennyiségben fertőznek-e meg más gyerekeket, vagy vannak esetleg olyan kulcsfontosságú gyerekek is, akiknek magas a kifokuk, vagyis sok más gyereket is megfertőztek.\nSzámítsuk ki az egyes csúcsok kimenő fokát degree() függvény segítségével. Az első argumentum a hálózati gráf objektum, a második argumentum pedig a mód (out, in vagy all). A függvény kimenetét a g.outd objektumhoz rendeljük.\n\n# Számítsuk ki az egyes csúcsok kimenő fokát\ng.outd &lt;- degree(g, mode = \"out\")\ng.outd\n#&gt;  45 172 180  42 182  12 181 175  22  10  31  34  17  93 178 184 \n#&gt;  30   2   7   3   4   4   8   2   2   4   3   3   7   4   1   6 \n#&gt;   8  56  58 186  11  19  64 179  54  74   5  78  39  82  44   1 \n#&gt;   1   3   3   1   4   2   3   2   1   2   1   3   2   4   1   1 \n#&gt;  47 183  97   7  21  37 106  18  16 116 188  14  79   4   6 145 \n#&gt;   3   1   1   7   2   3   2   3   2   3   1   2   1   1   1   3 \n#&gt; 148 153  73 156  68 123 102 110  98 169 174 173 146 177   2   3 \n#&gt;   2   6   1   2   1   2   2   1   1   1   1   1   1   2   0   0 \n#&gt;   9  13  15  20  23  24  25  26  27  28  29  30  32  33  35  36 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n#&gt;  38  40  41  43  46  48  49  50  51  52  53  55  57  59  60  61 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n#&gt;  62  63  65  66  67  69  70  71  72  75  76  77  80  81  83  84 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n#&gt;  85  86  87  88  89  90  91  92  94  95  96  99 100 101 103 104 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n#&gt; 105 107 108 109 111 112 113 114 115 117 118 119 120 121 122 124 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n#&gt; 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n#&gt; 142 143 144 147 149 150 151 152 154 155 157 158 159 160 161 162 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n#&gt; 163 164 165 166 167 168 170 171 176 185 187 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0\n\nTekintsük meg az összes egyedi kimenő fokot table() függvény segítségével a g.outd vektorobjektum alapján.\n\n# gyakorisági táblázat\ntable(g.outd)\n#&gt; g.outd\n#&gt;   0   1   2   3   4   6   7   8  30 \n#&gt; 125  21  16  12   6   2   3   1   1\n\nLátható, hogy van egy olyan gyerek, aki 30 más gyermeket fertőzött meg.\nKészítsünk hisztogramot a kimenő fokokról a hist() függvény segítségével a g.outd vektorobjektum alapján.\n\n# Készítsünk hisztogramot a kimenő fokokról\nhist(g.outd, breaks = 30)\n\n\n\n\n\n\n\n\nHatározzuk meg, hogy a g.outd vektorobjektumon a which.max() függvény segítségével melyik csúcsnak van a legmagasabb kimenő foka a hálózatban.\n\n# Keresse meg azt a csúcsot, amelyiknek a maximális kimenő foka van\nwhich.max(g.outd)\n#&gt; 45 \n#&gt;  1\n\nJelenítsük meg ábrán is.\n\n# alapértelmezés szerint minden címkéjének színe legyen fekete\nvlc &lt;- rep(\"black\", gorder(graph = g))\n# a megfelelő csúcsok címkéjének színe legyen piros\nvlc[V(g)$name %in% '45'] &lt;- \"red\"\n\nplot(g2, \n     vertex.label.color = vlc, \n     edge.color = 'grey77',\n     vertex.size = 0,\n     edge.arrow.size = 0.2,\n     layout = layout_nicely(g)\n     )\n\n\n\n\n\n\n\n\nJelenítsük meg a példa kedvéért az első három legmagasabb fokszámmal rendelkező csúcsot.\n\n# alapértelmezés szerint minden címkéjének színe legyen fekete\nvlc &lt;- rep(\"black\", gorder(graph = g))\n# a megfelelő csúcsok címkéjének színe legyen piros\nvlc[V(g)$name %in% names(sort(degree(g, mode = \"out\"), decreasing = T)[1:3])] &lt;- \"red\"\n\nplot(g2, \n     vertex.label.color = vlc, \n     edge.color = 'grey77',\n     vertex.size = 0,\n     edge.arrow.size = 0.2,\n     layout = layout_nicely(g)\n     )\n\n\n\n\n\n\n\n\n\n\n3.4.2 Közöttiség centralitás\nEgy adott csúcs fontosságának másik mércéje a közöttiség centralitás. A mutató kifejezi, hogy egy csúcs milyen gyakran fekszik a hálózat bármely két csúcsa közötti legrövidebb úton. Könnyen elképzelhető, hogy egy ilyen csúcs mennyire kritikus a hálózaton keresztüli információáramlás szempontjából. A nagy közöttiség centralitással rendelkező egyének kulcsfontosságú hidak a hálózat különböző részei között. A kanyaróátviteli hálózatunkban magas értékkel rendelkeznek azok a gyerekek, akik központi szerepet játszottak a betegség átvitelében a hálózat más részeire.\nHatározzuk meg a közöttiség centralitás értékét minden csúcsra a betweenness() függvény segítségével. Az argumentumban meg kell adnunk, hogy most irányított hálózatról van szó: directed = TRUE. Az eredményt mentsük el a g.b objektumba.\n\n# Közöttiség centralitás minden csúcsra\ng.b &lt;- betweenness(g, directed = TRUE)\ng.b\n#&gt;  45 172 180  42 182  12 181 175  22  10  31  34  17  93 178 184 \n#&gt;  89   3  20  28  11   8  34   7   4   8   6   6  16   8  15   0 \n#&gt;   8  56  58 186  11  19  64 179  54  74   5  78  39  82  44   1 \n#&gt;   2   6   6   2   8   4   8   8   3   4   2   6   4   8   2   2 \n#&gt;  47 183  97   7  21  37 106  18  16 116 188  14  79   4   6 145 \n#&gt;   6   1   2  27   8   6   6   8   4   6   2   8   3   3   3   6 \n#&gt; 148 153  73 156  68 123 102 110  98 169 174 173 146 177   2   3 \n#&gt;   6  14   3   4   3   8   6   3   3   3   0   0   2  16   0   0 \n#&gt;   9  13  15  20  23  24  25  26  27  28  29  30  32  33  35  36 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n#&gt;  38  40  41  43  46  48  49  50  51  52  53  55  57  59  60  61 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n#&gt;  62  63  65  66  67  69  70  71  72  75  76  77  80  81  83  84 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n#&gt;  85  86  87  88  89  90  91  92  94  95  96  99 100 101 103 104 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n#&gt; 105 107 108 109 111 112 113 114 115 117 118 119 120 121 122 124 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n#&gt; 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n#&gt; 142 143 144 147 149 150 151 152 154 155 157 158 159 160 161 162 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 \n#&gt; 163 164 165 166 167 168 170 171 176 185 187 \n#&gt;   0   0   0   0   0   0   0   0   0   0   0\n\nÁbrán is vizsgáljuk meg a közöttiség centralitás pontszámok eloszlását a hist() függvény segítségével.\n\n# Hisztogram közöttiség centralitásra\nhist(g.b, breaks = 80)\n\n\n\n\n\n\n\n\nA plot() segítségével elkészíthetjük a hálózat diagramját a közöttiségi pontszámok alapján. A csúcscímkék megjelenését NA-val nyomjuk el. A csúcsméret attribútum induljon 1-ről, plusz a g.b közöttiségi pontszámok négyzetgyöke. A négyzetgyök függvényre azért van szükség (az egyszerű összegzés helyett), mert ebben a hálózatban óriási különbségek vannak a közöttiségi pontszámok között, a pontszámok ilyen módon történő normalizálása biztosítja, hogy minden csomópont áttakinthető maradjon, de relatív fontosságuk továbbra is azonosítható legyen.\n\n# ábra a közöttiségi mutató szemléltetésével\nplot(g, \n     vertex.label = NA,\n     edge.color = 'black',\n     vertex.size = sqrt(g.b)+1,\n     edge.arrow.size = 0.05,\n     layout = layout_nicely(g))\n\n\n\n\n\n\n\n\nA hagyományos megjelenítéssel is emeljük ki a 3 legnagyobb közöttiségi mutatóval rendelkező csúcsot.\n\n# alapértelmezés szerint minden címkéjének színe legyen fekete\nvlc &lt;- rep(\"black\", gorder(graph = g))\n# a megfelelő csúcsok címkéjének színe legyen piros\nvlc[V(g)$name %in% names(sort(betweenness(g, directed = T), decreasing = T)[1:3])] &lt;- \"red\"\n\nplot(g2, \n     vertex.label.color = vlc, \n     edge.color = 'grey77',\n     vertex.size = 0,\n     edge.arrow.size = 0.2,\n     layout = layout_nicely(g)\n     )\n\n\n\n\n\n\n\n\n\n\n3.4.3 Közelség centralitás\nA közelségi mérőszám az összes többi csúcshoz való közelséggel ragadja meg a központiságot, vagyis az a “központi” csúcs, amely sok más csúcshoz “közel” van. A standard megközelítés szerint kiszámoljuk egy csúcs összesített távolságát az összes többi csúcstól, majd vesszük az összeg reciprokát.\nA közelségi mutatót a closeness() függvénnyel számítjuk ki, amelynek első paramétere a gráf, a második pedig a mode=, amelynek csak irányított gráfok esetén van jelentősége. Alapértelmezett értéke out, amely irányított gráfban a csúcsból kivezető élek segítségével méri csak a többi csúcshoz vezető élek távolságát. A legtöbbször erre van szükségünk, jelen esetben is.\n\n# Közelségi centralitás\ng.c &lt;- closeness(g, mode = \"out\")\ng.c\n#&gt;          45         172         180          42         182 \n#&gt; 0.006666667 0.250000000 0.076923077 0.037037037 0.055555556 \n#&gt;          12         181         175          22          10 \n#&gt; 0.250000000 0.015384615 0.076923077 0.500000000 0.250000000 \n#&gt;          31          34          17          93         178 \n#&gt; 0.333333333 0.333333333 0.111111111 0.250000000 0.023809524 \n#&gt;         184           8          56          58         186 \n#&gt; 0.002070393 1.000000000 0.333333333 0.333333333 1.000000000 \n#&gt;          11          19          64         179          54 \n#&gt; 0.250000000 0.500000000 0.200000000 0.166666667 1.000000000 \n#&gt;          74           5          78          39          82 \n#&gt; 0.500000000 1.000000000 0.333333333 0.500000000 0.250000000 \n#&gt;          44           1          47         183          97 \n#&gt; 1.000000000 1.000000000 0.333333333 1.000000000 1.000000000 \n#&gt;           7          21          37         106          18 \n#&gt; 0.090909091 0.166666667 0.333333333 0.500000000 0.200000000 \n#&gt;          16         116         188          14          79 \n#&gt; 0.500000000 0.333333333 1.000000000 0.166666667 1.000000000 \n#&gt;           4           6         145         148         153 \n#&gt; 1.000000000 1.000000000 0.333333333 0.500000000 0.125000000 \n#&gt;          73         156          68         123         102 \n#&gt; 1.000000000 0.500000000 1.000000000 0.500000000 0.500000000 \n#&gt;         110          98         169         174         173 \n#&gt; 1.000000000 1.000000000 1.000000000 0.125000000 0.047619048 \n#&gt;         146         177           2           3           9 \n#&gt; 1.000000000 0.028571429         NaN         NaN         NaN \n#&gt;          13          15          20          23          24 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;          25          26          27          28          29 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;          30          32          33          35          36 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;          38          40          41          43          46 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;          48          49          50          51          52 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;          53          55          57          59          60 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;          61          62          63          65          66 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;          67          69          70          71          72 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;          75          76          77          80          81 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;          83          84          85          86          87 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;          88          89          90          91          92 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;          94          95          96          99         100 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;         101         103         104         105         107 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;         108         109         111         112         113 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;         114         115         117         118         119 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;         120         121         122         124         125 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;         126         127         128         129         130 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;         131         132         133         134         135 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;         136         137         138         139         140 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;         142         143         144         147         149 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;         150         151         152         154         155 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;         157         158         159         160         161 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;         162         163         164         165         166 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;         167         168         170         171         176 \n#&gt;         NaN         NaN         NaN         NaN         NaN \n#&gt;         185         187 \n#&gt;         NaN         NaN\n\nNe felejtsük, hogy közelségi mutató esetén a kisebb érték jelenti a nagyobb fontosságot. Emeljük ki a három befolyásos csúcsot, amelyet a közelségi mutató alapján határozunk meg.\n\n# alapértelmezés szerint minden címkéjének színe legyen fekete\nvlc &lt;- rep(\"black\", gorder(graph = g))\n# a megfelelő csúcsok címkéjének színe legyen piros\nvlc[V(g)$name %in% names(sort(closeness(g, mode = \"out\"))[1:3])] &lt;- \"red\"\n\nplot(g2, \n     vertex.label.color = vlc, \n     edge.color = 'grey77',\n     vertex.size = 0,\n     edge.arrow.size = 0.2,\n     layout = layout_nicely(g)\n     )\n\n\n\n\n\n\n\n\n\n3.4.3.1 Feladat\n\nKészítsük el a következő irányított gráfot.\n\nVizsgáljuk meg a gráf irányítottságát és súlyozottságát.\nTárjuk fel a fokszámokat, vegyük figyelembe a kifokokat és a befokokat is.\nVizsgáljuk meg, hogy van-e él A és E kozött.\nHatározzuk meg az összes olyan élt, amely A-ból indul, vagy A-ba vezet.\nHatározzuk meg az összes kezdőcsúcsot a teljes hálózatban.\nHatározzuk meg az F összes szomszédját.\nHatározzuk meg az F és D összes közös szomszédját.\nHatározzuk meg a leghosszabb utat a gráfban. Emeljük ki ábrán.\nHatározzuk meg az F-től legfeljebb 2 távolságra lévő csúcsokat. Emeljük ki ábrán.\nSzámoljuk ki a fokszám, közöttiségi és közelségi centralitást.\n\n\n\n\n\n\n\n\n\n\n\nHozzuk létre a fenti irányított gráfot. Figyeljünk a színezésre is:\n\ngs1 &lt;- graph_from_literal(B--+A--+E--+H--+F--+G, \n                          I--+F, \n                          F--+E, \n                          F--+A, \n                          J--+D--+A, \n                          K--+D,\n                          L--+C--+A)\nV(gs1)$color &lt;- \"#FE8484\"\nplot(gs1,\n     vertex.label.color = \"black\",\n     vertex.label.cex = .9,\n     edge.color = 'black',\n     vertex.size = 18,\n     edge.arrow.size = .5,\n     layout = layout_nicely(gs1))\n\n\n\n\n\n\n\n\nFeltárjuk a fokszámokat:\n\nd_degree &lt;- data.frame(degre_all=degree(gs1, mode = \"all\"),\n                       degre_in=degree(gs1, mode = \"in\"),\n                       degre_out=degree(gs1, mode = \"out\"))\nd_degree\n#&gt;   degre_all degre_in degre_out\n#&gt; B         1        0         1\n#&gt; A         5        4         1\n#&gt; E         3        2         1\n#&gt; H         2        1         1\n#&gt; F         5        2         3\n#&gt; G         1        1         0\n#&gt; I         1        0         1\n#&gt; J         1        0         1\n#&gt; D         3        2         1\n#&gt; K         1        0         1\n#&gt; L         1        0         1\n#&gt; C         2        1         1\n\nVizsgáljuk meg, hogy van-e él A és E kozött:\n\ngs1['A', 'E'] # van él?\n#&gt; [1] 1\n\nHatározzuk meg az összes olyan élt, amely A-ból indul, vagy A-ba vezet.\n\nincident(gs1, 'A', mode = \"all\")\n#&gt; + 5/13 edges from fc82d6c (vertex names):\n#&gt; [1] B-&gt;A A-&gt;E F-&gt;A D-&gt;A C-&gt;A\n\nHatározzuk meg az összes kezdőcsúcsot a teljes hálózatban:\n\ntail_of(graph = gs1, es = E(gs1))\n#&gt; + 13/12 vertices, named, from fc82d6c:\n#&gt;  [1] B A E H F F F I J D K L C\n\nHatározzuk meg az F összes szomszédját:\n\nneighbors(gs1, \"F\", mode = \"all\")\n#&gt; + 5/12 vertices, named, from fc82d6c:\n#&gt; [1] A E H G I\n\nHatározzuk meg az F és D összes közös szomszédját.\n\nx &lt;- neighbors(gs1, \"F\", mode = \"all\")\ny &lt;- neighbors(gs1, \"D\", mode = \"all\")\nintersection(x, y)\n#&gt; + 1/12 vertex, named, from fc82d6c:\n#&gt; [1] A\n\nHatározzuk meg a leghosszabb utat a gráfban:\n\nfarthest_vertices(gs1)\n#&gt; $vertices\n#&gt; + 2/12 vertices, named, from fc82d6c:\n#&gt; [1] J G\n#&gt; \n#&gt; $distance\n#&gt; [1] 6\nget_diameter(gs1)\n#&gt; + 7/12 vertices, named, from fc82d6c:\n#&gt; [1] J D A E H F G\n\nEmeljük ki a leghosszabb utat a gráfban:\n\npath &lt;- shortest_paths(graph = gs1, from = farthest_vertices(gs1)$vertices[1],\n               to = farthest_vertices(gs1)$vertices[2], output = \"both\")\nE(gs1)$color &lt;- ifelse(unlist(E(gs1)) %in% unlist(path$epath), 'blue', 'black')\nplot(gs1,\n     vertex.label.color = \"black\",\n     vertex.label.cex = 0.9,\n     vertex.size = 18,\n     edge.arrow.size = .5,\n     layout = layout_nicely(gs1))\n\n\n\n\n\n\n\n\nHatározzuk meg az F-től legfeljebb 2 távolságra lévő csúcsokat:\n\nego(gs1, 2, 'F', mode = 'all')\n#&gt; [[1]]\n#&gt; + 9/12 vertices, named, from fc82d6c:\n#&gt; [1] F A E H G I B D C\n\nEmeljük ki az F-től legfeljebb 2 távolságra lévő csúcsokat:\n\n# alapértelmezés szerint minden címkéjének színe legyen fekete\nvlc &lt;- rep(\"black\", vcount(graph = gs1))\n# a megfelelő csúcsok címkéjének színe legyen piros\nvlc[unlist(V(gs1)) %in% unlist(ego(gs1, 2, 'F', mode = 'all'))] &lt;- \"white\"\n\nplot(gs1,\n     vertex.label.color = vlc,\n     vertex.label.cex = 0.9,\n     edge.color = 'black',\n     vertex.size = 18,\n     edge.arrow.size = .5,\n     layout = layout_nicely(gs1))\n\n\n\n\n\n\n\n\nSzámoljuk ki a fokszám, közöttiségi és közelségi centralitást:\n\ndegree(graph = gs1)\n#&gt; B A E H F G I J D K L C \n#&gt; 1 5 3 2 5 1 1 1 3 1 1 2\nbetweenness(graph = gs1, directed = T)\n#&gt;  B  A  E  H  F  G  I  J  D  K  L  C \n#&gt;  0 24 23 17 16  0  0  0 10  0  0  5\nround(betweenness(graph = gs1, directed = T, normalized = T), 2)\n#&gt;    B    A    E    H    F    G    I    J    D    K    L    C \n#&gt; 0.00 0.22 0.21 0.15 0.15 0.00 0.00 0.00 0.09 0.00 0.00 0.05\ncloseness(graph = gs1, mode = \"out\")\n#&gt;          B          A          E          H          F       ...\n#&gt; 0.06666667 0.10000000 0.11111111 0.14285714 0.20000000       ...\n#&gt;          I          J          D          K          L       ...\n#&gt; 0.10000000 0.04761905 0.06666667 0.04761905 0.04761905 0.0666...\n\n\n\n\n3.4.4 Fontos csomópontok és élek megjelenítése\nA kanyaró adatkészlettel kapcsolatos egyik probléma az, hogy három személyről nincs információ arról, hogy ki fertőzte meg őket. Úgy tűnik, hogy ezen egyedek egyike (184-es csúcs) végső soron felelős a betegség sok más egyedre való terjesztéséért (a legkisebb a közelségi mutatója), még akkor is, ha nem fertőzött meg közvetlenül túl sok egyedet. Mivel azonban a 184-es csúcsnak nincs bejövő éle a hálózatban, úgy tűnik, hogy kicsi a közöttiségi mutatója.\n\n# a 10 legbefolyásosabb csúcs a fokszám centralitás alapján\nsort(degree(g, mode = \"out\"), decreasing = T)[1:10]\n#&gt;  45 181 180  17   7 184 153 182  12  10 \n#&gt;  30   8   7   7   7   6   6   4   4   4\n\n\n# a 10 legbefolyásosabb csúcs a közöttiség centralitás alapján\nsort(betweenness(g, directed = T), decreasing = T)[1:10]\n#&gt;  45 181  42   7 180  17 177 178 153 182 \n#&gt;  89  34  28  27  20  16  16  15  14  11\n\n\n# a 10 legbefolyásosabb csúcs a közelség centralitás alapján\nsort(closeness(g, mode = \"out\"))[1:10]\n#&gt;         184          45         181         178         177 \n#&gt; 0.002070393 0.006666667 0.015384615 0.023809524 0.028571429 \n#&gt;          42         173         182         180         175 \n#&gt; 0.037037037 0.047619048 0.055555556 0.076923077 0.076923077\n\nA 184-es csúcs fontosságának feltárásának egyik módja az, ha vizualizáljuk az ettől az egyéntől kilépő kapcsolatok távolságait. Készítsünk ábrát, amely ezeket a távolságokat vizualizálja a legkorábban dokumentált betegtől (index eset).\nA make_ego_graph() függvény segítségével létrehozhatjuk a hálózatunk azon részhalmazát, amely a 184-es csúcshoz kapcsolódó csúcsokból áll. Az első argumentum az eredeti g gráf. A második paraméter a kapcsolatok maximális száma, amelyet a diameter() segítségével állítunk a hálózat átmérőjére. A harmadik paraméter a kívánt csúcs, amely most a 184. Az utolsó argumentum a mód, amely ebben az esetben iránytól függetlenül minden csatlakozást engedélyez.\n\n# részgráf készítése\ng184 &lt;- make_ego_graph(graph = g, order = diameter(g), nodes = '184', mode = \"all\")[[1]]\n\nJelenítsük meg a kapott részgráfot.\n\nplot(g184, \n     vertex.label.color = \"black\", \n     edge.color = 'gray77',\n     vertex.size = 0,\n     edge.arrow.size = 0.2,\n     layout = layout_nicely(g184))\n\n\n\n\n\n\n\n\nHozzunk létre egy dists objektumot, amely minden csúcs távolságát tartalmazza a 184-es csúcstól. Használjuk a distances() függvényt ennek kiszámításához.\n\n# távolságokat tartalmazó objektum a 184 csúcstól\ndists &lt;- distances(g184, \"184\")\ndists\n#&gt;     45 180 42 182 12 181 22 10 31 34 17 93 178 184 8 56 58 18...\n#&gt; 184  1   2  2   1  2   1  2  2  2  2  2  2   1   0 2  2  2   ...\n#&gt;     19 64 179 54 74 5 78 39 82 44 1 47 183 97 7 21 37 106 16 116\n#&gt; 184  2  2   2  3  2 2  2  2  2  2 2  2   1  2 3  2  2   3  2   2\n#&gt;     14 79 4 6 145 148 153 73 156 68 123 102 98 169 177 2 9 13 15\n#&gt; 184  2  3 3 3   2   3   2  3   2  3   4   3  3   3   1 2 2  3  2\n#&gt;     20 23 24 25 26 27 28 29 30 32 33 35 36 38 40 41 43 46 48 ...\n#&gt; 184  2  2  3  3  2  3  3  3  2  2  2  2  3  3  3  3  3  2  3 ...\n#&gt;     51 52 53 55 57 59 60 61 62 63 65 66 67 69 70 71 72 75 76 ...\n#&gt; 184  3  3  3  3  3  3  3  3  3  3  3  3  3  4  3  3  3  3  3 ...\n#&gt;     81 83 84 85 86 87 88 89 90 91 92 94 95 96 99 100 101 103 104\n#&gt; 184  3  3  3  3  3  3  3  3  3  3  3  2  3  3  3   3   4   3   3\n#&gt;     105 107 108 109 111 112 113 114 115 117 118 119 120 121 124\n#&gt; 184   3   3   4   3   3   3   3   3   3   3   3   3   4   3   4\n#&gt;     125 126 127 128 129 130 131 132 134 135 136 137 138 139 140\n#&gt; 184   4   3   4   4   4   3   3   3   3   4   3   3   3   4   4\n#&gt;     142 143 144 149 150 151 152 154 155 157 158 159 160 161 162\n#&gt; 184   3   3   3   3   4   3   3   3   4   3   3   3   4   4   5\n#&gt;     163 164 165 166 168 170 171 185 187\n#&gt; 184   5   4   4   3   4   3   4   3   3\n\nHozzunk létre egy színpalettát, amely összesen hat színt tartalmaz. Az index esetnek is biztosítsunk színt (fekete), majd az egyes távolságoknak is adjunk egy-egy színt (tudjuk, a maximális távolság 5, ezért van szükség összesen hat színre). A célunk az, hogy az azonos távolságra lévő csúcsok azonos színnel legyenek ábrázolva, az index eset színe pedig legyen fekete.\n\n# színpaletta az egyes távolságoknak, plusz a 184-es csúcsnak\ncolors &lt;- c(\"black\", \"red\", \"orange\", \"blue\", \"dodgerblue\", \"cyan\")\n\nAdjuk meg a csúcsok color attribútumát, amely épp a 184-es csúcstól való távolságnak megfelelő színkód legyen. Tudjuk, hogy a dists objektumban a legkisebb érték 0 (ez épp a 184-es csúcs távolsága önmagától), legnagyobb értéke pedig 5. Ennek megfelelően a colors[dists+1] indexelés segítségével épp a megfelelő 6 színkódot tudjuk elérni a színpalettából.\n\n# Set color attribute to vertices of network g184.\nV(g184)$color &lt;- colors[dists+1]\n\nA plot() segítségével már könnyen megjeleníthetjük a gráfot. A csúcscímke legyen minden esetben a távolság (dists). Adjunk ábracímet is main= argumentum segítségével.\n\n# a 184-es esettől (index eset) kinduló részgráf megjelenítése a távolságok kiemelésével\nplot(g184, \n     vertex.label = dists, \n     vertex.label.color = \"white\",\n     vertex.label.cex = .8,\n     edge.color = 'black',\n     vertex.size = 8,\n     edge.arrow.size = .05,\n     main = \"Távolságok az index esettől (184)\"\n     )",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Fontos csúcsok</span>"
    ]
  },
  {
    "objectID": "04_halozat_szerkezete.html",
    "href": "04_halozat_szerkezete.html",
    "title": "4  A hálózat szerkezete",
    "section": "",
    "text": "4.1 A fejezet fogalmai",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>A hálózat szerkezete</span>"
    ]
  },
  {
    "objectID": "04_halozat_szerkezete.html#a-fejezet-fogalmai",
    "href": "04_halozat_szerkezete.html#a-fejezet-fogalmai",
    "title": "4  A hálózat szerkezete",
    "section": "",
    "text": "Sajátvektor centralitás\n\nazt méri, hogy egy csúcs mennyire jól kapcsolódik a többi csúcshoz.\n\nHálózat sűrűsége\n\na csúcsok között ténylegesen létező és potenciálisan lehetséges kapcsolatok aránya.\n\nÁtlagos úthossz\n\na hálózat összes csúcspárja közötti legrövidebb utak hosszának átlaga.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>A hálózat szerkezete</span>"
    ]
  },
  {
    "objectID": "04_halozat_szerkezete.html#a-hálózat-összekapcsoltsága",
    "href": "04_halozat_szerkezete.html#a-hálózat-összekapcsoltsága",
    "title": "4  A hálózat szerkezete",
    "section": "4.2 A hálózat összekapcsoltsága",
    "text": "4.2 A hálózat összekapcsoltsága\n\n4.2.1 Sajátvektor centralitás\nA fejezetben használt függvények:\n\neigen_centrality() - Sajátvektor-centralitás\nedge_density() - hálózat sűrűsége\n\nEbben az alfejezetben a hálózat megismeréséhez először azonosítjuk a kulcscsúcsokat az ún. sajátvektor centralitás segítségével, majd ábrázoljuk a hálózatot.\nA sajátvektor centralitás azt méri, hogy egy csúcs mennyire jól kapcsolódik a többi csúcshoz. A legmagasabb sajátvektor centralitású csúcsok azok, amelyek sok másik csúcshoz kapcsolódnak, de különösen olyan csúcsokhoz, amelyek maguk is erősen kapcsolódnak másokhoz.\nHozzunk létre egy irányítatlan gráfot:\n\nlibrary(igraph)\ng &lt;- graph_from_literal(A--B--J, \n                        A--C--K, \n                        A--D, \n                        A--H,\n                        D--H,\n                        D--M,\n                        D--L,\n                        F--H,\n                        A--F--G,\n                        F--E--I,\n                        A--E)\nV(g)$color &lt;- \"#FE8484\"\nplot(g,\n     vertex.label.color = \"black\",\n     vertex.label.cex = .9,\n     edge.color = 'black',\n     vertex.size = 18,\n     layout = layout_nicely(g))\n\n\n\n\n\n\n\n\nAz {igraph} csomagban a sajátvektor-centralitás kiszámításához az eigen_centrality() függvényt használjuk.\n\neigen_centrality(g)\n#&gt; $vector\n#&gt;          A          B          J          C          K       ...\n#&gt; 1.00000000 0.32952405 0.09882059 0.32952405 0.09882059 0.6269...\n#&gt;          H          M          L          F          G       ...\n#&gt; 0.71449055 0.18800581 0.18800581 0.75559956 0.22659589 0.5785...\n#&gt;          I \n#&gt; 0.17348938 \n#&gt; \n#&gt; $value\n#&gt; [1] 3.334569\n#&gt; \n#&gt; $options\n#&gt; $options$bmat\n#&gt; [1] \"I\"\n#&gt; \n#&gt; $options$n\n#&gt; [1] 13\n#&gt; \n#&gt; $options$which\n#&gt; [1] \"LA\"\n#&gt; \n#&gt; $options$nev\n#&gt; [1] 1\n#&gt; \n#&gt; $options$tol\n#&gt; [1] 0\n#&gt; \n#&gt; $options$ncv\n#&gt; [1] 0\n#&gt; \n#&gt; $options$ldv\n#&gt; [1] 0\n#&gt; \n#&gt; $options$ishift\n#&gt; [1] 1\n#&gt; \n#&gt; $options$maxiter\n#&gt; [1] 3000\n#&gt; \n#&gt; $options$nb\n#&gt; [1] 1\n#&gt; \n#&gt; $options$mode\n#&gt; [1] 1\n#&gt; \n#&gt; $options$start\n#&gt; [1] 1\n#&gt; \n#&gt; $options$sigma\n#&gt; [1] 0\n#&gt; \n#&gt; $options$sigmai\n#&gt; [1] 0\n#&gt; \n#&gt; $options$info\n#&gt; [1] 0\n#&gt; \n#&gt; $options$iter\n#&gt; [1] 8\n#&gt; \n#&gt; $options$nconv\n#&gt; [1] 1\n#&gt; \n#&gt; $options$numop\n#&gt; [1] 27\n#&gt; \n#&gt; $options$numopb\n#&gt; [1] 0\n#&gt; \n#&gt; $options$numreo\n#&gt; [1] 15\n\nA visszaadott objektum egy sokelemű lista, de az egyes csúcsokhoz tartozó tényleges centralitási pontszámok a vector nevű elemben találhatók. Amint ebben a példában látható, az irányítatlan hálózat, az “A”, “D”, “E”, “F” és “H” csúcsok különösen magasak a sajátvektor-centralitásban.\nKorábban megismerkedtünk más csúcs-fontossági mutatókkal is (például a fokszám, a közöttiség, és közelségi centralitás), ésmár is ismerjük sajátvektor centralitást is. Létezik azonban egy olyan mutatócsalás is, amely elárul valamit a hálózatok általános mintájáról vagy szerkezetéről. A hálózat általános szerkezetének legegyszerűbb mértéke a hálózat sűrűsége. Ez megegyezik azoknak az éleknek az arányával, amelyek valóban léteznek egy hálózatban, azokhoz az élekhez képest, amelyek potenciálisan létezhetnének minden csúcspár között.\n\nvcount(g) # csúcsok száma\n#&gt; [1] 13\necount(g) # élek száma\n#&gt; [1] 15\n\n\nedge_density(g)\n#&gt; [1] 0.1923077\n\nA 13 csúcsból álló hálózatokban potenciálisan 78 él lehet, ha minden csúcs össze van kötve minden csúccsal. A fenti hálózatban 15 él van, így a sűrűség 0,19, ami a potenciális élek 19%-ának felel meg.\nA lenti hálózatnak már 30 éle van, ami 0,38 sűrűségű, vagyis az összes létező potenciális kapcsolat 38%-a. A sűrűség tehát annak mértéke, hogy egy hálózat mennyire össze van kötve.\nLáthatjuk, az edge_density() függvényt hívtuk segítségül.\n\nlibrary(igraph)\ng2 &lt;- graph_from_literal(A--B--J, \n                        A--C--K, \n                        A--D, \n                        A--H,\n                        D--H,\n                        D--M,\n                        D--L,\n                        F--H,\n                        A--F--G,\n                        F--E--I,\n                        A--E,\n                        G--I, E--G, F--L, H--L, M--C, \n                        K--D, K--J, J--C, J--G, B--C, \n                        B--D, A--M, H--L, F--L, E--H,\n                        E--B, K--M )\nV(g2)$color &lt;- \"#FE8484\"\nplot(g2,\n     vertex.label.color = \"black\",\n     vertex.label.cex = .9,\n     edge.color = 'black',\n     vertex.size = 18,\n     layout = layout_nicely(g2))\n\n\n\n\n\n\n\n\n\nvcount(g2) # csúcsok száma\n#&gt; [1] 13\necount(g2) # élek száma\n#&gt; [1] 30\n\n\nedge_density(g2)\n#&gt; [1] 0.3846154\n\n\n\n4.2.2 Átlagos úthossz\nA hálózat összekapcsolhatóságának másik mértéke az átlagos úthossz. Ezt úgy számítjuk ki, hogy meghatározzuk a hálózat összes csúcspárja közötti legrövidebb utak hosszának átlagát. Az {igraph}-ban ezt úgy számítjuk ki, hogy a mean_distance() függvényt alkalmazzuk a gráfra, és azt is specifikáljuk, hogy a gráf irányítatlan-e vagy irányított.\n\nmean_distance(g)\n#&gt; [1] 2.474359\nmean_distance(g2)\n#&gt; [1] 1.769231\n\nA bal oldali hálózat átlagos úthossza 2,47, míg a jobb oldali hálózat átlagos úthossza 1,77. Ennek az az oka, hogy a csúcsok közötti átlagos legrövidebb út csökken. Például a bal oldali G és K között a legrövidebb út négy lépésből áll: G-F-A-C-K. A jobb oldalon két lépés található: G-J-K. Ez arra utal, hogy a jobb oldali hálózat jobban össze van kapcsolva, és ez jelentősen megkönnyíti a csúcsok közötti barangolást.\n\n\n4.2.3 Feladat\nForrest Gump hálózat\nEbben a példában a Forrest Gump című filmen alapuló közösségi hálózatot fogjuk használni. A hálózat csúcsai a film sreplői, a hálózat minden éle pedig azt jelzi, hogy a két karakter együtt szerepelt a film legalább egy jelenetében. Ez a hálózat irányítatlan.\nA hálózat megismeréséhez először létre kell hoznia a hálózati objektumot a nyers adatkészletből. Ezután azonosítja a kulcscsúcsokat egy sajátvektor-centralitásnak nevezett mértékkel. A magas sajátvektor-centralitású egyének azok, akik szorosan kapcsolódnak más, erősen kapcsolódó egyénekhez. Ezután feltáró vizualizációt készít a hálózatról. A Forrest Gump hálózati adatkészlettel fog dolgozni. A Forrest Gump hálózat minden éle azt jelzi, hogy a film ezen két karaktere együtt szerepelt a film legalább egy jelenetében. Világos, a hálózatunk irányítatlan.\nOlvassuk be a forrest_gump.csv vesszővel tagolt szöveges állományt és vizsgáljuk meg az adattábla első néhány sorát a head() segítségével.\n\nd &lt;- rio::import(file = \"adat/forrest_gump.csv\")\nhead(d)\n#&gt;              V1        V2\n#&gt; 1 ABBIE HOFFMAN     JENNY\n#&gt; 2 ABBIE HOFFMAN POLICEMAN\n#&gt; 3     ANCHORMAN   FORREST\n#&gt; 4     ANCHORMAN    LT DAN\n#&gt; 5     ANCHORMAN     MARGO\n#&gt; 6     ANCHORMAN  MRS GUMP\n\nHozzunk létre egy irányítatlan hálózatot a graph_from_data_frame() használatával.\n\nlibrary(igraph)\ng_forrest &lt;- graph_from_data_frame(d, directed = FALSE)\n\nAzonosítsuk a kulcscsúcsokat az eigen_centrality() függvény segítségével, és ennek eredményeit rendeljük hozzá a g_forrest_ec objektumhoz. Ezután határozzuk meg, hogy melyik szereplő rendelkezik a legmagasabb sajátvektor centralitással. A centralitási pontszámok értékeit a g_forrest_ec$vector tárolja.\n\n# sajátvektor centralitás kiszámítása\ng_forrest_ec &lt;- eigen_centrality(g_forrest)\n\n\n# a három legnagyobb sajátvektor centralitássú csúcs \ng_forrest_ec$vector[order(g_forrest_ec$vector, decreasing = T)][1:3]\n#&gt;   FORREST     JENNY    LT DAN \n#&gt; 1.0000000 0.6482939 0.3388870\n\nKészítsünk egy diagramot a Forrest Gump hálózatról a plot() segítségével. Állítsuk be a csúcsok méretét a g_forrest_ec$vector tárolt sajátvektor centralitásértékek 25-szörösére.\n\n# a hálózat kívánt megjelenítése\nplot(g_forrest, \n     vertex.label.color = \"black\", \n     vertex.label.cex = 0.6,\n     vertex.size = 25*(g_forrest_ec$vector),\n     edge.color = 'gray88',\n     main = \"Forrest Gump Hálózat\"\n)\n\n\n\n\n\n\n\n\nHálózati sűrűség és átlagos úthossz\nAz első hálózat szintű mérőszám, amelyet megvizsgálunk a gráf sűrűsége lesz. Ez lényegében a hálózatban ténylegesen létező élek és a csúcsok közötti potenciális élek aránya. Ez azt jelzi, hogy a gráf csúcsai milyen jól kapcsolódnak egymáshoz.\nA hálózat összekapcsoltságának másik mértéke az átlagos úthossz. Ezt úgy számítjuk ki, hogy meghatározzuk a hálózat összes csúcspárja közötti legrövidebb utak hosszának átlagát. A csúcspárok közötti leghosszabb úthosszt a hálózati gráf átmérőjének nevezzük. Számoljuk ki a az eredeti gráf átmérőjét és átlagos úthosszát is.\nAz edge_density() függvény segítségével számítsuk ki a gráf sűrűségét, és rendeljük hozzá ezt az értéket a gd vektorhoz.\n\n# a hálózat sűrűsége\ngd &lt;- edge_density(g_forrest)\ngd\n#&gt; [1] 0.06199954\n\nA diameter() segítségével számítsuk ki az eredeti gráf átmérőjét.\n\n# a gráf átmérője\ndiameter(g_forrest, directed = FALSE)\n#&gt; [1] 4\n\nRendelje a gráf átlagos úthosszát a g.apl objektumhoz a mean_distance() függvénnyel.\n\n# az átlagos úthossz a gráfban\ng.apl &lt;- mean_distance(g_forrest, directed = FALSE)\ng.apl\n#&gt; [1] 1.994967",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>A hálózat szerkezete</span>"
    ]
  },
  {
    "objectID": "04_halozat_szerkezete.html#véletlen-gráfok",
    "href": "04_halozat_szerkezete.html#véletlen-gráfok",
    "title": "4  A hálózat szerkezete",
    "section": "4.3 Véletlen gráfok",
    "text": "4.3 Véletlen gráfok\nBár egyszerű kiszámítani a hálózati mérőszámokat, például az átlagos úthosszat, nem mindig világos, hogy ezek az értékek mennyire magasak vagy alacsonyak. A hálózatkutatók gyakran véletlenszerű hálózati gráf technikákat alkalmaznak, hogy ezeknek a mérőszámoknak jelentést adjanak.\nA véletlen gráf egy olyan hálózat, amelyet véletlenszerűen generálunk (egy algoritmus segítségével), miközben figyelünk arra, hogy a generált gráf az eredeti hálózathoz hasonló jellemzőkkel rendelkezzen. Például a legegyszerűbb véletlenszerű gráf, amelyet létrehozhat, az lenne, amelyiknek ugyanannyi csúcsa van, mint az eredeti gráfnak, és megközelítőleg ugyanolyan sűrűsége van, mint az eredeti gráfnak.\nTegyük fel, hogy a lenti hálózat az eredeti hálózat.\n\nplot(g,\n     vertex.label.color = \"black\",\n     vertex.label.cex = .9,\n     edge.color = 'black',\n     vertex.size = 18,\n     layout = layout_nicely(g))\n\n\n\n\n\n\n\n\nA lenti hálózat egy véletlenszerű gráf, amelyet az algoritmus állít elő. Mindkettőnek ugyanannyi csúcsa van, és megközelítőleg azonos a sűrűsége. Egy ilyen véletlenszerű hálózat létrehozásához az {igraph} csomag az erdos-dot-renyi-dot-game() függvényt. Az első argumentum a hálózat csúcsainak száma - ehhez használhatod a gorder()-t. A grafikon sűrűségét a második p-pont-vagy-pont-m argumentummal kell használni. A típust ‘gnp’-re kell állítani.\n\n# véletlen gráf generálása\ng_random &lt;- erdos.renyi.game(n = vcount(g), p.or.m = edge_density(g), type=\"gnp\")\nplot(g_random,\n     vertex.label.color = \"black\",\n     vertex.label.cex = .9,\n     edge.color = 'black',\n     vertex.size = 18,\n     layout = layout_nicely(g_random))\n\n\n\n\n\n\n\n\n\n4.3.1 Véletlenszerű gráfok és randomizációs tesztek\nHa többször futtatjuk a véletlenszerű gráfot létrehozó algoritmust, akkor észre fogjuk venni, hogy minden alkalommal más gráfot hoz létre. Ez különösen akkor hasznos, ha meg akarjuk állapítani, hogy az eredeti hálózat valamely tulajdonsága – például az átlagos útvonalhossz – különösen szokatlan vagy figyelemre méltó-e.\nA randomizációs teszttel kiszámolhatjuk az átlagos útvonalhosszat mondjuk 1000 olyan véletlenszerű hálózatra, amelyek az eredeti hálózaton alapulnak. Ezután megvizsgálhatjuk, hogy a megfigyelt eredeti értéke jelentősen eltérnek-e a véletlenszerű hálózatokon keresztül előállított értékektől. Ez a hálózati randomizációs tesztek alapelve.\nÖsszefoglalva a randomizációs teszt lépései (például átlagos úthosszra\n\nHozzunk létre 1000 véletlen gráfot, amely paramétereiben megegyezik az eredeti gráffal (például a csúcsok számában és a hálózat sűrűségében)\nSzámoljuk ki az eredeti gráf átlagos úthosszát\nSzámoljuk ki az átlagos átlagos úthosszt az 1000 generált gráfra\nHatározzuk meg azoknak a véletlen gráfoknak a számát, amelyek az eredeti gráf átlagos úthosszánál kisebb és nagyobb átlagos úthosszal rendelkeznek\n\nA lenti kód létrehoz 1000 db véletlen gráfot. Az 1000 hálózatot a gl listaobjektum tárolja.\n\n# 1000 elemű lista, melynek elemei NULL-ok (egyelőre üresek)\ngl &lt;- vector('list', 1000)\n# az 1000 véletlen gráf létrehozása\nfor (i in 1:1000) {\n  gl[[i]] &lt;- erdos.renyi.game(n = vcount(g), \n                               p.or.m = edge_density(g), \n                               type=\"gnp\")\n}\n\nA gl listában szereplő egyes véletlenszerű hálózatok átlagos útvonalhosszának kiszámításához az sapply() segítségével alkalmazzuk a mean_distance() függvényt a lista minden hálózatára. Itt ezek az értékek a gl_apls objektumként kerülnek tárolásra.\n\n# eltároljuk az 1000 db átlagos úthosszt\ngl_apls &lt;- sapply(gl, mean_distance, directed = FALSE)\n\nA fentiek birtokában már elvégezhetjük a szükséges összehasonlítást:\n\n# hány véletlen gráfnak nagyobb az átlagos úthossza az eredeti gráfhoz képest?\ntable(mean_distance(g)&lt;gl_apls)\n#&gt; \n#&gt; FALSE  TRUE \n#&gt;   669   331\n\nAz eredeti hálózat és a véletlenszerű hálózatok átlagos útvonalhosszának összehasonlítása történhet az adatok ábrázolásával is. A hist() segítségével megismerhetjük a véletlen hálózatok átlagos úthosszainak eloszlását. Ha hozzáadunk egy piros pontozott vonalat az abline() függvénnyel, amely az eredeti hálózat átlagos úthossz-értékénél metszi az x-tengelyt, akkor közvetlen összehasonlítást végezhetünk.\n\nhist(gl_apls)\nabline(v=mean_distance(g), col=\"red\", lty=3, lwd=2)\n\n\n\n\n\n\n\n\nItt is jól látható, hogy az eredeti hálózatban megfigyelt átlagos úthossz elfogadható mértékben jellemzőnek mondható egy ilyen méretű és sűrűségű véletlen hálózatra is.\n\n\n4.3.2 Feladat\nA véletlen gráfok generálása fontos módszer annak vizsgálatára, hogy az eredeti gráf bizonyos tulajdonságai mellett mennyire valószínű vagy valószínűtlen más hálózati metrikák előfordulása. A legegyszerűbb véletlen gráf az, amelyiknek ugyanannyi csúcsa van, mint az eredeti gráfnak, és megközelítőleg ugyanolyan sűrűsége van, mint az eredeti gráfnak. Vizsgáljuk meg ezt a kérdést az eredeti Forrest Gump hálózaton keresztül.\nHozzunk létre egy Véletlen gráfot az erdos.renyi.game() függvény segítségével. Az első argumentum (n=) a gráf csomópontjainak számát jelenti, amely a vcount() segítségével számítható ki. A második argumentum (p.or.m=) pedig a gráf sűrűsége, az utolsó argumentum (type='gnp') pedig azt jelzi, hogy a hálózat sűrűségét használjuk egy véletlenszerű gráf létrehozásához. Az új gráfot g_random objektumban tároljuk el.\n\n# véletlen gráf létrehozása\ng_random &lt;- erdos.renyi.game(n = vcount(g_forrest), p.or.m = edge_density(g_forrest), type = \"gnp\")\n# információk a véletlen gráfról\ng_random\n#&gt; IGRAPH 00d156a U--- 94 290 -- Erdos-Renyi (gnp) graph\n#&gt; + attr: name (g/c), type (g/c), loops (g/l), p (g/n)\n#&gt; + edges from 00d156a:\n#&gt;  [1]  4-- 5  1-- 7  2--12  1--15  3--16 10--16 11--16  5--18 ...\n#&gt; [10] 19--22 21--25 24--27 10--28 14--28 25--28 15--29 16--29 ...\n#&gt; [19] 26--30  6--31 20--31 21--33 16--34 22--34 33--34  9--35 ...\n#&gt; [28] 18--35 33--35 14--36 16--36 35--37 10--39 22--39  3--40 ...\n#&gt; [37]  9--41 16--42 20--42 28--42 37--42  5--43 13--43 28--43 ...\n#&gt; [46]  2--44 11--45 35--45 36--45 33--46 34--46 37--47  9--48 ...\n#&gt; [55] 13--49 13--50 22--50 24--50 26--50 28--50 30--50 18--51 ...\n#&gt; [64] 46--51 49--51  3--52  4--52 36--52 45--52  7--54 11--54 ...\n#&gt; + ... omitted several edges\n\n\n# a véletlen gráf megjelenítése\nplot(g_random)\n\n\n\n\n\n\n\n\nSzámoljuk ki a véletlen hálózat sűrűségét. Többször elvégezve a generálást ez az érték kissé változhat, de megközelítőleg megegyezik az erdeti gráf sűrűségével.\n\n\n# a véletlen gráf sűrűsége`\nedge_density(g_random)\n#&gt; [1] 0.06634637\n\nSzámítsuk ki a véletlen gráf átlagos úthosszát is.\n\n# a véletlen gráf átlagos úthossza\nmean_distance(g_random, directed = FALSE)\n#&gt; [1] 2.672615\n\n\n# az eredeti gáf átlagos úthossza\nmean_distance(g_forrest, directed = FALSE)\n#&gt; [1] 1.994967\n\nLátható, hogy a Forrest Gump hálózat átlagos úthossza kisebb, mint a véletlen hálózat átlagos úthossza. Ha néhányszor lefuttattjuk a kódot, akkor észrevetjük, hogy a Forrest Gump hálózatban szinte mindig alacsonyabb értéket kapunk. Ez azt sugallja, hogy a Forrest Gump hálózat jobban össze van kapcsolva, mint a véletlen hálózatok, annak ellenére, hogy a véletlen hálózatoknak ugyanannyi csúcsuk van, és megközelítőleg azonos sűrűséggel rendelkeznek.\nGeneráljunk 1000 véletlenszerű gráfot az eredeti gráfból.\n\n# 1000 elemű lista\ngl_forrest &lt;- vector('list',1000)\nfor(i in 1:1000){\n  gl_forrest[[i]] &lt;- erdos.renyi.game(n = vcount(g_forrest), p.or.m = edge_density(g_forrest), type = \"gnp\")\n}\n\nSzámítsuk ki az 1000 véletlen gráf átlagos úthosszát az sapply() segítségével. Hozzunk létre egy új gl_apls vektort.\n\n# 1000 véletlen gráfra az átlagos úthossz megállapítása\ngl_apls &lt;- sapply(gl_forrest, mean_distance, directed = FALSE)\n\nÁbrázoljuk az 1000 véletlen gráf átlagos úthosszának hisztogramját a hist() segítségével. Adjunk hozzá egy piros szaggatott függőleges vonalat is, amelynek az x metszéspontja az eredeti gráf átlagos úthosszának felel meg.\n\nhist(gl_apls, xlim = range(c(1.5, 6)))\nabline(v = mean_distance(g_forrest), col = \"red\", lty = 3, lwd = 2)\n\n\n\n\n\n\n\n\nSzámítsuk ki, hogy a véletlen gráfok átlagos úthosszának értékei hány esetben kisebbek az eredeti gráf átlagos úthosszánál. Ez lényegében annak a valószínűsége, hogy véletlenül ilyen úthosszt kapunk..\n\n# annak az aránya, hogy a véletlen gráfok átlagos úthossza kisebb, mint az eredeti gráf átlagos úthossza \nmean(gl_apls &lt; mean_distance(g_forrest))\n#&gt; [1] 0\n\nLáthatjuk, a Forrest Gump hálózat sokkal jobban össze van kapcsolva, mint azt véletlenül várnánk, mivel nulla annak az esélya, hogy a véletlenszerű hálózat átlagos úthossza kisebb, mint a Forrest Gump hálózat átlagos úthossza.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>A hálózat szerkezete</span>"
    ]
  },
  {
    "objectID": "04_halozat_szerkezete.html#hálózati-alstruktúrák",
    "href": "04_halozat_szerkezete.html#hálózati-alstruktúrák",
    "title": "4  A hálózat szerkezete",
    "section": "4.4 Hálózati alstruktúrák",
    "text": "4.4 Hálózati alstruktúrák\nAz előző részben a hálózat szerkezetének néhány általános jellemzőjére figyeltünk, mint például a sűrűség és az átlagos úthossz. A következő részben a közösségi hálózatok mikrostrukturális jellemzőit tárgyaljuk, amelyek fontos szerepet játszhatnak a hálózat működését illetően.\n\n4.4.1 Tranzitivitás\nA helyi kapcsolat fontos mércéje a hálózatban létező háromszögek (más néven triádok) vizsgálata. Egy hálózatban minden három csúcsból álló csoporthoz három potenciális él tartozik. Ha minden él létezik, akkor a triádot zártnak mondjuk.\n\nplot(g)\n\n\n\n\n\n\n\n\nA fenti hálózatot nézve három zárt háromszöget azonosíthatunk. Az A-E-F, A-F-H és A-D-H háromszögek zártak, mindhárom élükkel. Néhány háromszögnek két éle van, például az E-F-G, vagy az A-B-C. Néhány háromszögnek csak egy éle van, ilyen a C-K-M, vagy G-E-I. Néhány háromszögnek nincs éle, például a H-L-M. Az {igraph} csomagban a hálózat összes zárt háromszöge megtalálható a triangles() függvény segítségével.\n\ntriangles(g)\n#&gt; + 9/13 vertices, named, from ffcc945:\n#&gt; [1] A D H A F E A F H\n\n\n\n4.4.2 Globális tranzitivitás\nEgy hálózat tranzitivitásának kiszámításával formálisan felmérhetjük, hogy egy három csúcsból álló csoport mennyire kapcsolódik egymáshoz. A tranzitivitás azt méri, hogy egy adott csúcs szomszédos csúcsai milyen valószínűséggel kapcsolódnak össze. Az {igraph} csomagban a transitivity() függvény segítségével számítható ki.\n\ntransitivity(g, type = \"global\")\n#&gt; [1] 0.2571429\n\n\n\n4.4.3 Helyi tranzitivitás\nMegszámolhatjuk az egyes csúcsokhoz tartozó zárt háromszögek számát a count_triangles() segítségével. Ez a függvény a gráf objektumot, majd a csúcsazonosítók vektorát tartalmazza.\n\ncount_triangles(g, vids = c('A', 'F'))\n#&gt; [1] 3 2\n\nLehetőség van az egyes csúcsok helyi szintű tranzitivitásának meghatározására is. Ez a mérőszám kiszámítja a ténylegesen létező zárt háromszögek arányát (amelyeknek a csúcs része) az elméleti zárt háromszögek számához képest (amelynek a csúcs szintén a része).\nA helyi tranzitivitás kiszámítható a transitivity() használatával. A type='local' argumentumot is használjuk.\n\n# lokális tranzitivitás kiszámítása\ntransitivity(g, type = \"local\", vids = c('A', 'F'))\n#&gt;         A         F \n#&gt; 0.2000000 0.3333333\n\nA példában látható, hogy az ‘F’ lokális tranzitivitása valamivel nagyobb, mint az ‘A’-é. Ennek az az oka, hogy ‘F’ kapcsolatainak nagyobb hányada vezet zárt háromszögekbe, mint az ‘A’ kapcsolataié.\n\n\n4.4.4 Klikkek\nA klikkek azonosítása egy másik gyakran használt módszer a hálózati alstruktúra értékelése során. Egy klikkben minden csúcs minden másik csúcshoz kapcsolódik. A gyakorlatban nagyon ritka, hogy egy teljes hálózat egy klikket alkosson (vagyis teljes gráf legyen). A hálózatokon belül azonban annál gyakrabban léteznek klikkek, mint például a lenti példában.\n\ng3 &lt;- graph_from_literal(A--E--G, \n                        A--B--E--F--I--K,\n                        F--H,\n                        I--J,\n                        A--B--C--I,\n                        C--D,\n                        E--C,\n                        B--F,\n                        E--C,\n                        C--F)\nV(g3)$color &lt;- \"#FE8484\"\nplot(g3,\n     vertex.label.color = \"black\",\n     vertex.label.cex = .9,\n     edge.color = 'black',\n     vertex.size = 18)\n\n\n\n\n\n\n\n\nEbben a hálózatban a létező legnagyobb klikknek négy csúcsa van - B, C, E és F. Ez a négy csúcs mind összekapcsolódik egymással. Egy másik megközelítés az, hogy az általuk alkotott összes háromszög zárt.\n\n\n4.4.5 A klikkek azonosítása\nA hálózat legnagyobb klikkje azonosítható az {igraph} csomagban a largest_cliques() függvény segítségével. A függvény Visszaadja, hogy hány csúcs van az adott klikkben, és ezeknek a csúcsoknak az azonosítóit is listázza.\n\n# a hálózat legnagyobb klikkje\nlargest_cliques(g3)\n#&gt; [[1]]\n#&gt; + 4/11 vertices, named, from 019dfb2:\n#&gt; [1] F E C B\n\nA max_cliques() függvény segítségével a kettőtől a legnagyobb klikkméretig bármilyen méretű klikk azonosítható. Ez a függvény az egyes méretű klikkek listáját adja vissza. A példahálózatban látható, hogy két 3-as méretű klikk létezik: az A, B, E és I, C, F. Bennük minden csúcs összekapcsolódik, és nem részei egy nagyobb klikknek.\n\n# az összes klikk\nmax_cliques(g3)\n#&gt; [[1]]\n#&gt; + 2/11 vertices, named, from 019dfb2:\n#&gt; [1] D C\n#&gt; \n#&gt; [[2]]\n#&gt; + 2/11 vertices, named, from 019dfb2:\n#&gt; [1] K I\n#&gt; \n#&gt; [[3]]\n#&gt; + 2/11 vertices, named, from 019dfb2:\n#&gt; [1] G E\n#&gt; \n#&gt; [[4]]\n#&gt; + 2/11 vertices, named, from 019dfb2:\n#&gt; [1] J I\n#&gt; \n#&gt; [[5]]\n#&gt; + 2/11 vertices, named, from 019dfb2:\n#&gt; [1] H F\n#&gt; \n#&gt; [[6]]\n#&gt; + 3/11 vertices, named, from 019dfb2:\n#&gt; [1] I F C\n#&gt; \n#&gt; [[7]]\n#&gt; + 3/11 vertices, named, from 019dfb2:\n#&gt; [1] A E B\n#&gt; \n#&gt; [[8]]\n#&gt; + 4/11 vertices, named, from 019dfb2:\n#&gt; [1] F E C B\n\n\n\n4.4.6 Feladat\nHáromszögek és tranzitivitás\nA helyi kapcsolódások másik fontos mértéke a hálózati gráfokban a háromszögek (más néven triádok) vizsgálata. Ebben a feladatban a cél az összes olyan zárt háromszög megtalálása, amely egy hálózatban létezik. A zárt háromszög azt jelenti, hogy a három megadott csúcs között minden él létezik.\nEzután kiszámíthatjuk a hálózat tranzitivitását. Ez megegyezik a hálózat összes lehetséges zárt háromszögének arányával. Újra megkíséreljük azon zárt háromszögek számát megtalálni, amelyeknek egy adott csúcs része.\nKeressük meg a Forrest Gump hálózat összes lehetséges háromszögének mátrixát a triangles() függvény segítségével.\n\n# minden háromszög megmutatása a hálózaton belül\noptions(max.print=999999)\nmatrix(triangles(g_forrest), nrow = 3)\n#&gt;      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11]\n#&gt; [1,]   36   36   36   36   36   36   36   36   36    36    36\n#&gt; [2,]    1    1    1    1    2    4    4    6    6     6     6\n#&gt; [3,]   83   38   39   66   68   57   24   27   75    40    45\n#&gt;      [,12] [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21]\n#&gt; [1,]    36    36    36    36    36    36    36    36    36    36\n#&gt; [2,]     7     7     8    11    11    11    12    12    13    14\n#&gt; [3,]     8    69    69    12    13    70    70    13    70     4\n#&gt;      [,22] [,23] [,24] [,25] [,26] [,27] [,28] [,29] [,30] [,31]\n#&gt; [1,]    36    36    36    36    36    36    36    36    36    36\n#&gt; [2,]    14    14    14    14    14    14    14    14    15    15\n#&gt; [3,]    19    24    71    65    57    62    63    64    21    72\n#&gt;      [,32] [,33] [,34] [,35] [,36] [,37] [,38] [,39] [,40] [,41]\n#&gt; [1,]    36    36    36    36    36    36    36    36    36    36\n#&gt; [2,]    17    17    18    18    19    19    21    22    24    26\n#&gt; [3,]    22    42     5    28    71    63    72    42    57    73\n#&gt;      [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50] [,51]\n#&gt; [1,]    36    36    36    36    36    36    36    36    36    36\n#&gt; [2,]    26    26    26    26    26    27    27    27    28    28\n#&gt; [3,]    52    47    48    49    50    75    45    40     5    90\n#&gt;      [,52] [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61]\n#&gt; [1,]    36    36    36    36    36    36    36    36    36    36\n#&gt; [2,]    30    30    30    34    38    38    38    39    39    40\n#&gt; [3,]    84    61    51    88    83    66    39    83    66    75\n#&gt;      [,62] [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71]\n#&gt; [1,]    36    36    36    36    36    36    36    36    36    36\n#&gt; [2,]    40    41    41    41    41    41    41    41    41    41\n#&gt; [3,]    45     1     3     6     7     8    11    12    13    26\n#&gt;      [,72] [,73] [,74] [,75] [,76] [,77] [,78] [,79] [,80] [,81]\n#&gt; [1,]    36    36    36    36    36    36    36    36    36    36\n#&gt; [2,]    41    41    41    41    41    41    41    41    41    41\n#&gt; [3,]    27    30    32    33    86    37    38    39    40    43\n#&gt;      [,82] [,83] [,84] [,85] [,86] [,87] [,88] [,89] [,90] [,91]\n#&gt; [1,]    36    36    36    36    36    36    36    36    36    36\n#&gt; [2,]    41    41    41    41    41    41    41    41    41    41\n#&gt; [3,]    44    45    47    48    49    50    51    52    53    54\n#&gt;      [,92] [,93] [,94] [,95] [,96] [,97] [,98] [,99] [,100] [...\n#&gt; [1,]    36    36    36    36    36    36    36    36     36  ...\n#&gt; [2,]    41    41    41    41    41    41    41    41     41  ...\n#&gt; [3,]    56    58    61    66    69    70    73    74     75  ...\n#&gt;      [,102] [,103] [,104] [,105] [,106] [,107] [,108] [,109]\n#&gt; [1,]     36     36     36     36     36     36     36     36\n#&gt; [2,]     41     41     41     43     43     43     44     44\n#&gt; [3,]     82     83     84     82     54     53      2      3\n#&gt;      [,110] [,111] [,112] [,113] [,114] [,115] [,116] [,117]\n#&gt; [1,]     36     36     36     36     36     36     36     36\n#&gt; [2,]     44     44     44     44     44     44     44     44\n#&gt; [3,]      9     14     17     19     22     82     71     42\n#&gt;      [,118] [,119] [,120] [,121] [,122] [,123] [,124] [,125]\n#&gt; [1,]     36     36     36     36     36     36     36     36\n#&gt; [2,]     44     44     44     44     44     44     45     47\n#&gt; [3,]     43     53     62     63     64     65     75     73\n#&gt;      [,126] [,127] [,128] [,129] [,130] [,131] [,132] [,133]\n#&gt; [1,]     36     36     36     36     36     36     36     36\n#&gt; [2,]     47     47     47     47     48     48     48     48\n#&gt; [3,]     52     50     48     49     73     52     50     49\n#&gt;      [,134] [,135] [,136] [,137] [,138] [,139] [,140] [,141]\n#&gt; [1,]     36     36     36     36     36     36     36     36\n#&gt; [2,]     49     49     49     50     50     51     51     52\n#&gt; [3,]     73     52     50     73     52     84     61     73\n#&gt;      [,142] [,143] [,144] [,145] [,146] [,147] [,148] [,149]\n#&gt; [1,]     36     36     36     36     36     36     36     36\n#&gt; [2,]     53     54     54     56     58     59     60     60\n#&gt; [3,]     82     87     56     89     79     92      2     20\n#&gt;      [,150] [,151] [,152] [,153] [,154] [,155] [,156] [,157]\n#&gt; [1,]     36     36     36     36     36     36     36     36\n#&gt; [2,]     60     60     60     60     60     61     62     62\n#&gt; [3,]     23     25     31     81     43     84     71     19\n#&gt;      [,158] [,159] [,160] [,161] [,162] [,163] [,164] [,165]\n#&gt; [1,]     36     36     36     36     36     36     36     36\n#&gt; [2,]     62     62     63     64     64     64     64     64\n#&gt; [3,]     35     63     71      3     71     19     63     62\n#&gt;      [,166] [,167] [,168] [,169] [,170] [,171] [,172] [,173]\n#&gt; [1,]     36     36     36     36     36     36     36     36\n#&gt; [2,]     64     65     65     65     65     65     65     65\n#&gt; [3,]     46      4     71     19     24     64     63     57\n#&gt;      [,174] [,175] [,176] [,177] [,178] [,179] [,180] [,181]\n#&gt; [1,]     36     36     41     41     41     41     41     41\n#&gt; [2,]     65     66      1      1      1      1      6      6\n#&gt; [3,]     62     83     83     38     39     66     27     75\n#&gt;      [,182] [,183] [,184] [,185] [,186] [,187] [,188] [,189]\n#&gt; [1,]     41     41     41     41     41     41     41     41\n#&gt; [2,]      6      6      7      7      8     11     11     11\n#&gt; [3,]     40     45      8     69     69     12     13     70\n#&gt;      [,190] [,191] [,192] [,193] [,194] [,195] [,196] [,197]\n#&gt; [1,]     41     41     41     41     41     41     41     41\n#&gt; [2,]     12     12     13     26     26     26     26     26\n#&gt; [3,]     70     13     70     73     52     47     48     49\n#&gt;      [,198] [,199] [,200] [,201] [,202] [,203] [,204] [,205]\n#&gt; [1,]     41     41     41     41     41     41     41     41\n#&gt; [2,]     26     27     27     27     30     30     30     38\n#&gt; [3,]     50     75     45     40     84     61     51     83\n#&gt;      [,206] [,207] [,208] [,209] [,210] [,211] [,212] [,213]\n#&gt; [1,]     41     41     41     41     41     41     41     41\n#&gt; [2,]     38     38     39     39     40     40     43     43\n#&gt; [3,]     66     39     83     66     75     45     82     54\n#&gt;      [,214] [,215] [,216] [,217] [,218] [,219] [,220] [,221]\n#&gt; [1,]     41     41     41     41     41     41     41     41\n#&gt; [2,]     43     44     44     44     44     45     47     47\n#&gt; [3,]     53      3     82     43     53     75     73     52\n#&gt;      [,222] [,223] [,224] [,225] [,226] [,227] [,228] [,229]\n#&gt; [1,]     41     41     41     41     41     41     41     41\n#&gt; [2,]     47     47     47     48     48     48     48     49\n#&gt; [3,]     50     48     49     73     52     50     49     73\n#&gt;      [,230] [,231] [,232] [,233] [,234] [,235] [,236] [,237]\n#&gt; [1,]     41     41     41     41     41     41     41     41\n#&gt; [2,]     49     49     50     50     51     51     52     53\n#&gt; [3,]     52     50     73     52     84     61     73     82\n#&gt;      [,238] [,239] [,240] [,241] [,242] [,243] [,244] [,245]\n#&gt; [1,]     41     41     41     41     41     44     44     44\n#&gt; [2,]     54     58     58     61     66      2     14     14\n#&gt; [3,]     56     10     79     84     83     67     19     71\n#&gt;      [,246] [,247] [,248] [,249] [,250] [,251] [,252] [,253]\n#&gt; [1,]     44     44     44     44     44     44     44     44\n#&gt; [2,]     14     14     14     14     17     17     19     19\n#&gt; [3,]     65     62     63     64     22     42     71     63\n#&gt;      [,254] [,255] [,256] [,257] [,258] [,259] [,260] [,261]\n#&gt; [1,]     44     44     44     44     44     44     44     44\n#&gt; [2,]     22     43     43     53     62     62     62     63\n#&gt; [3,]     42     82     53     82     71     19     63     71\n#&gt;      [,262] [,263] [,264] [,265] [,266] [,267] [,268] [,269]\n#&gt; [1,]     44     44     44     44     44     44     44     44\n#&gt; [2,]     64     64     64     64     64     65     65     65\n#&gt; [3,]      3     71     19     63     62     71     19     64\n#&gt;      [,270] [,271] [,272] [,273] [,274] [,275] [,276] [,277]\n#&gt; [1,]     44     44     14     14     14     14     14     14\n#&gt; [2,]     65     65      4      4     19     19     24     65\n#&gt; [3,]     63     62     57     24     71     63     57      4\n#&gt;      [,278] [,279] [,280] [,281] [,282] [,283] [,284] [,285]\n#&gt; [1,]     14     14     14     14     14     14     14     14\n#&gt; [2,]     65     65     65     65     65     65     65     62\n#&gt; [3,]     71     19     24     64     63     57     62     71\n#&gt;      [,286] [,287] [,288] [,289] [,290] [,291] [,292] [,293]\n#&gt; [1,]     14     14     14     14     14     14     14     65\n#&gt; [2,]     62     62     63     64     64     64     64      4\n#&gt; [3,]     19     63     71     71     19     63     62     57\n#&gt;      [,294] [,295] [,296] [,297] [,298] [,299] [,300] [,301]\n#&gt; [1,]     65     65     65     65     65     65     65     65\n#&gt; [2,]      4     19     19     24     64     64     64     64\n#&gt; [3,]     24     71     63     57     71     19     63     62\n#&gt;      [,302] [,303] [,304] [,305] [,306] [,307] [,308] [,309]\n#&gt; [1,]     65     65     65     65     64     64     64     64\n#&gt; [2,]     63     62     62     62     19     19     63     62\n#&gt; [3,]     71     71     19     63     71     63     71     71\n#&gt;      [,310] [,311] [,312] [,313] [,314] [,315] [,316] [,317]\n#&gt; [1,]     64     64     62     62     62     19     26     26\n#&gt; [2,]     62     62     19     19     63     63     52     47\n#&gt; [3,]     19     63     71     63     71     71     73     73\n#&gt;      [,318] [,319] [,320] [,321] [,322] [,323] [,324] [,325]\n#&gt; [1,]     26     26     26     26     26     26     26     26\n#&gt; [2,]     47     47     47     47     48     48     48     48\n#&gt; [3,]     52     50     48     49     73     52     50     49\n#&gt;      [,326] [,327] [,328] [,329] [,330] [,331] [,332] [,333]\n#&gt; [1,]     26     26     26     26     26     47     47     47\n#&gt; [2,]     49     49     49     50     50     52     50     50\n#&gt; [3,]     73     52     50     73     52     73     73     52\n#&gt;      [,334] [,335] [,336] [,337] [,338] [,339] [,340] [,341]\n#&gt; [1,]     47     47     47     47     47     47     47     48\n#&gt; [2,]     48     48     48     48     49     49     49     52\n#&gt; [3,]     73     52     50     49     73     52     50     73\n#&gt;      [,342] [,343] [,344] [,345] [,346] [,347] [,348] [,349]\n#&gt; [1,]     48     48     48     48     48     49     49     49\n#&gt; [2,]     50     50     49     49     49     52     50     50\n#&gt; [3,]     73     52     73     52     50     73     73     52\n#&gt;      [,350] [,351] [,352] [,353] [,354] [,355] [,356] [,357]\n#&gt; [1,]     50     43      1      1      1      1      1      1\n#&gt; [2,]     52     53     38     38     38     39     39     66\n#&gt; [3,]     73     82     83     66     39     83     66     83\n#&gt;      [,358] [,359] [,360] [,361] [,362] [,363] [,364] [,365]\n#&gt; [1,]      6      6      6      6      6      6     27     27\n#&gt; [2,]     27     27     27     40     40     45     45     40\n#&gt; [3,]     75     45     40     75     45     75     75     75\n#&gt;      [,366] [,367] [,368] [,369] [,370] [,371] [,372] [,373]\n#&gt; [1,]     27     38     38     38     39     40      4     11\n#&gt; [2,]     40     66     39     39     66     45     24     12\n#&gt; [3,]     45     83     83     66     83     75     57     70\n#&gt;      [,374] [,375] [,376] [,377] [,378] [,379] [,380] [,381]\n#&gt; [1,]     11     11     12     30     30     30     51      7\n#&gt; [2,]     12     13     13     61     51     51     61      8\n#&gt; [3,]     13     70     70     84     84     61     84     69\n#&gt;      [,382] [,383] [,384]\n#&gt; [1,]     17     18     15\n#&gt; [2,]     22     28     21\n#&gt; [3,]     42      5     72\n\nA count_triangles() függvény segítségével keressük meg, hány háromszögnek a része a “BUBBA” csúcs.\n\n# a \"BUBBA\" csúcs mely háromszögnek része\ncount_triangles(g_forrest, vids = 'BUBBA')\n#&gt; [1] 37\n\nSzámítsuk ki a Forrest Gump hálózat globális tranzitivitását.\n\n# globális tranzitivitás\ng.tr &lt;- transitivity(g_forrest)\ng.tr\n#&gt; [1] 0.1918082\n\nKeressük meg a “BUBBA” csúcs helyi tranzitivitását is.\n\n# a BUBBA csúcs lokális tranzitivitása\ntransitivity(g_forrest, vids = 'BUBBA', type = \"local\")\n#&gt;     BUBBA \n#&gt; 0.6727273\n\nRandomizációs teszt a tranzitívitásra\nAhogy az átlagos úthossz esetében, most is megvizsgálhatjuk, hogy a Forrest Gump hálózat globális tranzitivitása szignifikánsan magasabb-e, mint azt véletlenül várnánk az azonos méretű és sűrűségű hálózatok esetében. Összehasonlíthatja a Forrest Gump globális tranzitivitását 1000 másik véletlenszerű hálózattal. Ezer véletlenszerű hálózatot korábban már eltároltunk a gl_forrest listaobjektumban.\n\n# 1000 véletlen gráfra a globális tranztivitás megtalálása\ngl_trs &lt;- sapply(gl_forrest, transitivity)\n\nVizsgálja meg a véletlenszerű hálózatok tranzitivitásainak összesített statisztikáit a summary() segítségével.\n\n# összesítő statisztika a véletlen hálózatok tranzitivitására\nsummary(gl_trs)\n#&gt;    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#&gt; 0.02695 0.05513 0.06321 0.06236 0.06992 0.09903\n\nSzámítsa ki azoknak a véletlenszerű gráfoknak az arányát, amelyek tranzitivitása nagyobb, mint a Forrest Gump-hálózat tranzitivitása\n\n# Forrest Gump hálózatánál magasabb tranzitivitású grafikonok arányát\nmean(gl_trs &gt; transitivity(g_forrest))\n#&gt; [1] 0\n\nKlikkek\nA klikkek azonosítása általános gyakorlat az irányítatlan hálózatokban. Egy klikkben bármely két csomópont szomszédos, vagyis minden egyes csomópont kapcsolódik a klikk minden másik egyedi csomópontjához. Azonosítsuk a Forrest Gump hálózat legnagyobb klikkjeit. A különböző méretű klikkek maximális számát is meghatározhatjuk. Egy klikk akkor maximális, ha nem terjeszthető ki nagyobb klikkre.\nAzonosítsa a hálózat legnagyobb klikkjeit a largest_cliques() függvény segítségével.\n\n# a legnagyobb klikkek azonosítása\nlargest_cliques(g_forrest)\n#&gt; [[1]]\n#&gt; + 9/94 vertices, named, from 0032662:\n#&gt; [1] EMCEE   FORREST MEN     MAN #5  MAN #3  MAN #2  MAN #1  M...\n#&gt; [9] JENNY  \n#&gt; \n#&gt; [[2]]\n#&gt; + 9/94 vertices, named, from 0032662:\n#&gt; [1] FORREST   LT DAN    STRONGARM SONG      SOLDIER   SGT SIMS \n#&gt; [7] MAN       DALLAS    BUBBA\n\nHatározzuk meg a hálózat összes maximális klikkjét a max_cliques() függvény segítségével. Rendelje hozzá ennek a függvénynek a kimenetét a clq listaobjektumhoz.\n\n# az összes klikk azonosítása\nclq &lt;- max_cliques(g_forrest)\nclq\n#&gt; [[1]]\n#&gt; + 2/94 vertices, named, from 0032662:\n#&gt; [1] OLD SHRIMPER FORREST     \n#&gt; \n#&gt; [[2]]\n#&gt; + 2/94 vertices, named, from 0032662:\n#&gt; [1] NURSE   FORREST\n#&gt; \n#&gt; [[3]]\n#&gt; + 2/94 vertices, named, from 0032662:\n#&gt; [1] MRS BLUE FORREST \n#&gt; \n#&gt; [[4]]\n#&gt; + 2/94 vertices, named, from 0032662:\n#&gt; [1] PATRONS FORREST\n#&gt; \n#&gt; [[5]]\n#&gt; + 2/94 vertices, named, from 0032662:\n#&gt; [1] AGING HIPPIE FORREST     \n#&gt; \n#&gt; [[6]]\n#&gt; + 2/94 vertices, named, from 0032662:\n#&gt; [1] CAB DRIVER JENNY     \n#&gt; \n#&gt; [[7]]\n#&gt; + 2/94 vertices, named, from 0032662:\n#&gt; [1] WILD-EYED MAN FORREST      \n#&gt; \n#&gt; [[8]]\n#&gt; + 2/94 vertices, named, from 0032662:\n#&gt; [1] PRESIDENT KENNEDY FORREST          \n#&gt; \n#&gt; [[9]]\n#&gt; + 2/94 vertices, named, from 0032662:\n#&gt; [1] SECURITY GUARD FORREST       \n#&gt; \n#&gt; [[10]]\n#&gt; + 2/94 vertices, named, from 0032662:\n#&gt; [1] REVEREND FORREST \n#&gt; \n#&gt; [[11]]\n#&gt; + 3/94 vertices, named, from 0032662:\n#&gt; [1] REPORTER FORREST  NEWSMAN \n#&gt; \n#&gt; [[12]]\n#&gt; + 3/94 vertices, named, from 0032662:\n#&gt; [1] KATZENBACH EARL       FORREST   \n#&gt; \n#&gt; [[13]]\n#&gt; + 3/94 vertices, named, from 0032662:\n#&gt; [1] YOUNG MAN  FORREST    NEWSCASTER\n#&gt; \n#&gt; [[14]]\n#&gt; + 3/94 vertices, named, from 0032662:\n#&gt; [1] YOUNG HIPPIE FORREST      JENNY       \n#&gt; \n#&gt; [[15]]\n#&gt; + 3/94 vertices, named, from 0032662:\n#&gt; [1] PRINCIPAL FORREST   MRS GUMP \n#&gt; \n#&gt; [[16]]\n#&gt; + 3/94 vertices, named, from 0032662:\n#&gt; [1] DEAN     FORREST  MRS GUMP\n#&gt; \n#&gt; [[17]]\n#&gt; + 3/94 vertices, named, from 0032662:\n#&gt; [1] PRESIDENT NIXON FORREST         OFFICER        \n#&gt; \n#&gt; [[18]]\n#&gt; + 3/94 vertices, named, from 0032662:\n#&gt; [1] DOCTOR   FORREST  MRS GUMP\n#&gt; \n#&gt; [[19]]\n#&gt; + 3/94 vertices, named, from 0032662:\n#&gt; [1] ELVIS    FORREST  MRS GUMP\n#&gt; \n#&gt; [[20]]\n#&gt; + 3/94 vertices, named, from 0032662:\n#&gt; [1] JENNY'S DAD FORREST     JENNY      \n#&gt; \n#&gt; [[21]]\n#&gt; + 3/94 vertices, named, from 0032662:\n#&gt; [1] BUS DRIVER FORREST    MRS GUMP  \n#&gt; \n#&gt; [[22]]\n#&gt; + 3/94 vertices, named, from 0032662:\n#&gt; [1] DJ      FORREST JENNY  \n#&gt; \n#&gt; [[23]]\n#&gt; + 3/94 vertices, named, from 0032662:\n#&gt; [1] DRIVER  FORREST JENNY  \n#&gt; \n#&gt; [[24]]\n#&gt; + 3/94 vertices, named, from 0032662:\n#&gt; [1] ELDERLY WOMAN FORREST       MAN          \n#&gt; \n#&gt; [[25]]\n#&gt; + 3/94 vertices, named, from 0032662:\n#&gt; [1] PRESIDENT JOHNSON ANCHORMAN         FORREST          \n#&gt; \n#&gt; [[26]]\n#&gt; + 3/94 vertices, named, from 0032662:\n#&gt; [1] GIRL    FORREST JENNY  \n#&gt; \n#&gt; [[27]]\n#&gt; + 3/94 vertices, named, from 0032662:\n#&gt; [1] MARGO     ANCHORMAN LT DAN   \n#&gt; \n#&gt; [[28]]\n#&gt; + 2/94 vertices, named, from 0032662:\n#&gt; [1] GOVERNOR WALLACE NEWSMAN         \n#&gt; \n#&gt; [[29]]\n#&gt; + 2/94 vertices, named, from 0032662:\n#&gt; [1] GOVERNOR WALLACE CHET HUNTLEY    \n#&gt; \n#&gt; [[30]]\n#&gt; + 3/94 vertices, named, from 0032662:\n#&gt; [1] MALE NURSE FORREST    SOLDIER   \n#&gt; \n#&gt; [[31]]\n#&gt; + 3/94 vertices, named, from 0032662:\n#&gt; [1] OLDER BOY      FOOTBALL COACH FORREST       \n#&gt; \n#&gt; [[32]]\n#&gt; + 3/94 vertices, named, from 0032662:\n#&gt; [1] BOB HOPE FORREST  LT DAN  \n#&gt; \n#&gt; [[33]]\n#&gt; + 3/94 vertices, named, from 0032662:\n#&gt; [1] BOY          JENNY        OLDER BOY #1\n#&gt; \n#&gt; [[34]]\n#&gt; + 4/94 vertices, named, from 0032662:\n#&gt; [1] JOHN LENNON              BUS STOP - PRESENT - DAY\n#&gt; [3] FORREST                  DICK CAVETT             \n#&gt; \n#&gt; [[35]]\n#&gt; + 3/94 vertices, named, from 0032662:\n#&gt; [1] ANCHORMAN FORREST   LT DAN   \n#&gt; \n#&gt; [[36]]\n#&gt; + 3/94 vertices, named, from 0032662:\n#&gt; [1] ANCHORMAN FORREST   MRS GUMP \n#&gt; \n#&gt; [[37]]\n#&gt; + 4/94 vertices, named, from 0032662:\n#&gt; [1] ASSISTANT COACH CHET HUNTLEY    FORREST         FOOTBALL ...\n#&gt; \n#&gt; [[38]]\n#&gt; + 4/94 vertices, named, from 0032662:\n#&gt; [1] NEWSCASTER FORREST    JENNY      LOUISE    \n#&gt; \n#&gt; [[39]]\n#&gt; + 4/94 vertices, named, from 0032662:\n#&gt; [1] NEWSCASTER FORREST    JENNY      NEWSMAN   \n#&gt; \n#&gt; [[40]]\n#&gt; + 4/94 vertices, named, from 0032662:\n#&gt; [1] OLDER BOY #1 FORREST      OLDER BOY #2 JENNY       \n#&gt; \n#&gt; [[41]]\n#&gt; + 3/94 vertices, named, from 0032662:\n#&gt; [1] MRS GUMP FORREST  LOUISE  \n#&gt; \n#&gt; [[42]]\n#&gt; + 5/94 vertices, named, from 0032662:\n#&gt; [1] WHITE WOMAN BILLY       JENNY       FORREST     BLACK WOMAN\n#&gt; \n#&gt; [[43]]\n#&gt; + 5/94 vertices, named, from 0032662:\n#&gt; [1] CARLA      DICK CLARK LT DAN     LENORE     FORREST   \n#&gt; \n#&gt; [[44]]\n#&gt; + 4/94 vertices, named, from 0032662:\n#&gt; [1] ANNOUNCER FORREST   LT DAN    JENNY    \n#&gt; \n#&gt; [[45]]\n#&gt; + 4/94 vertices, named, from 0032662:\n#&gt; [1] ANNOUNCER FORREST   LT DAN    SOLDIER  \n#&gt; \n#&gt; [[46]]\n#&gt; + 6/94 vertices, named, from 0032662:\n#&gt; [1] NIGHT          ANOTHER DAY    SONG           FORREST       \n#&gt; [5] DRILL SERGEANT BUBBA         \n#&gt; \n#&gt; [[47]]\n#&gt; + 6/94 vertices, named, from 0032662:\n#&gt; [1] BOY #3      BOY #1      SLOW MOTION JENNY       FORREST    \n#&gt; [6] BOY #2     \n#&gt; \n#&gt; [[48]]\n#&gt; + 6/94 vertices, named, from 0032662:\n#&gt; [1] RUBEN         BLACK PANTHER WESLEY        MASAI        \n#&gt; [5] JENNY         FORREST      \n#&gt; \n#&gt; [[49]]\n#&gt; + 6/94 vertices, named, from 0032662:\n#&gt; [1] SUSAN    FORREST  MINISTER LT DAN   LOUISE   JENNY   \n#&gt; \n#&gt; [[50]]\n#&gt; + 7/94 vertices, named, from 0032662:\n#&gt; [1] ISABEL        ABBIE HOFFMAN VET           POLICEMAN    \n#&gt; [5] JENNY         HILARY        FORREST      \n#&gt; \n#&gt; [[51]]\n#&gt; + 7/94 vertices, named, from 0032662:\n#&gt; [1] FORREST JR BERT       LYNN MARIE LITTLE BOY JENNY     \n#&gt; [6] FORREST    ERNIE     \n#&gt; \n#&gt; [[52]]\n#&gt; + 9/94 vertices, named, from 0032662:\n#&gt; [1] EMCEE   FORREST MEN     MAN #5  MAN #3  MAN #2  MAN #1  M...\n#&gt; [9] JENNY  \n#&gt; \n#&gt; [[53]]\n#&gt; + 9/94 vertices, named, from 0032662:\n#&gt; [1] FORREST   LT DAN    STRONGARM SONG      SOLDIER   SGT SIMS \n#&gt; [7] MAN       DALLAS    BUBBA\n\nSzámítsuk ki az egyes maximális klikkek hosszát! Használjuk az sapply() függvényt a clq objektummal. A table() segítségével figyeljük meg, az egyes az egyes maximális klikk hosszak előfordulását.\n\n# az egyes maximális klikkek hossza\ntable(sapply(clq, length))\n#&gt; \n#&gt;  2  3  4  5  6  7  9 \n#&gt; 12 24  7  2  4  2  2\n\nA legnagyobb klikk\nA hálózat megjelenítése során a szükségünk lehet a hálózat egy részének megjelenítésére. Jelenítsük meg a Forrest Gump hálózat legnagyobb klikkjeit. Korábban láttuk, hogy két 9-es méretű klikk van. Ezeket egymás mellett fogjuk ábrázolni, miután két új igraph objektumot hozunk létre. Az új hálózatok az eredeti hálózat 9 nagyságú klikkjei lesznek. A subgraph() függvény lehetővé teszi, hogy kiválassza, mely csúcsokat kívánja megtartani egy új hálózati objektumban.\nRendelje hozzá a hálózat legnagyobb klikkjeinek listáját az lc objektumhoz.\n\n# a legnagyobb klikkek a elmentése\nlc &lt;- largest_cliques(g_forrest)\n\nHozzunk létre két új irányítatlan részgráfot a subgraph() függvény segítségével. Az első részgráf (gs1) csak az első legnagyobb klikk csúcsait tartalmazza. A második (gs2) csak a második legnagyobb klikk csúcsait tartalmazza. Ez a függvény az as.undirected()-be van csomagolva, így biztosítva, hogy az algráf is irányítatlan legyen.\n\n# két irányítatlan gráf lérehozás a két legnagyobb klikkből\ngs1 &lt;- as.undirected(subgraph(g_forrest, lc[[1]]))\ngs2 &lt;- as.undirected(subgraph(g_forrest, lc[[2]]))\n\nJelenítsük meg egymás mellett a két részgráfot a plot() segítségével. Győződjünk meg arról, hogy az elrendezés layout.circle() értékre legyen állítva, hogy az ábra könnyebben átlátható legyen.\n\n# az egyik legnagyobb klikk megjelenítése\nplot(gs1,\n     vertex.label.color = \"black\",\n     vertex.label.cex = 0.9,\n     vertex.size = 0,\n     edge.color = 'gray28',\n     layout = layout.circle(gs1)\n)\n\n\n\n\n\n\n\n\n\n# a másik legnagyobb klikk megjelenítése\nplot(gs2,\n     vertex.label.color = \"black\",\n     vertex.label.cex = 0.9,\n     vertex.size = 0,\n     edge.color = 'gray28',\n     layout = layout.circle(gs2)\n)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>A hálózat szerkezete</span>"
    ]
  },
  {
    "objectID": "05_specialis_kapcsolatok.html",
    "href": "05_specialis_kapcsolatok.html",
    "title": "5  Speciális kapcsolatok",
    "section": "",
    "text": "5.1 A fejezet fogalmai",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Speciális kapcsolatok</span>"
    ]
  },
  {
    "objectID": "05_specialis_kapcsolatok.html#a-fejezet-fogalmai",
    "href": "05_specialis_kapcsolatok.html#a-fejezet-fogalmai",
    "title": "5  Speciális kapcsolatok",
    "section": "",
    "text": "asszortativitás\n\nMilyen valószínűséggel kapcsolódik egymáshoz két olyan csúcs, amelyek valamilyen közös tulajdonságon osztoznak.\n\nreciprocitás\n\nEgy irányított hálózat reciprocitása megegyezik a szimmetrikus élek arányával. Ez azon kimenő élek aránya, amelyeknek bejövő élük is van.\n\nközösség\n\nAzon csúcsok halmaza, amelyek szorosabban kapcsolódnak egymáshoz, mint a többi csúcshoz a hálózatban.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Speciális kapcsolatok</span>"
    ]
  },
  {
    "objectID": "05_specialis_kapcsolatok.html#szoros-kapcsolatok-asszortativitás-és-kölcsönösség",
    "href": "05_specialis_kapcsolatok.html#szoros-kapcsolatok-asszortativitás-és-kölcsönösség",
    "title": "5  Speciális kapcsolatok",
    "section": "5.2 Szoros kapcsolatok: asszortativitás és kölcsönösség",
    "text": "5.2 Szoros kapcsolatok: asszortativitás és kölcsönösség\nA fejezetben használt függvények:\n\nassortativity() - asszortativitás kiszámolása a hálózatban egy adott tulajdonság alapján\nreciprocity() - a reciprocitás kiszámítása irányított hálózatban\n\nEgy hálózatban a következő kérdés is érdekes lehet: a csúcsok véletlenszerűen társulnak más csúcsokhoz, vagy inkább a hasonló csúcsokhoz kapcsolódnak. Például az azonos nemű gyerekek nagyobb valószínűséggel jelölik-e egymást barátnak egy baráti hálózatban, illetve az azonos politikai meggyőződésű személyek nagyobb valószínűséggel válaszolnak-e egymás posztjára.\nFormálisabban a hálózatelemzésben az “asszortativitás” kifejezést annak meghatározására használják, hogy milyen valószínűséggel kapcsolódik egymáshoz két olyan csúcs, amelyek valamilyen közös tulajdonsággal rendelkeznek. Ezek a tulajdonságok lehetnek kategorikusak, például politikai párt vagy nem, de lehetnek számszerűek is, például életkor.\nA következő hálózatban két kategóriánk van: bátor és félénk.\n\nlibrary(tidyverse)\nlibrary(igraph)\n\nedges_df &lt;- tribble(\n                ~from,   ~to,\n                \"A\", \"B\",\n                \"B\", \"C\",\n                \"B\", \"D\",\n                \"C\", \"D\",\n                \"B\", \"E\",\n                \"D\", \"E\",\n                \"E\", \"F\",\n                \"F\", \"G\",\n                \"G\", \"H\",\n                \"F\", \"H\",\n                \"H\", \"L\",\n                \"L\", \"J\",\n                \"D\", \"J\",\n                \"G\", \"I\",\n                \"H\", \"I\",\n                \"L\", \"M\",\n                \"K\", \"I\",\n                \"I\", \"M\",\n                \"M\", \"N\",\n                \"M\", \"O\",\n                \"N\", \"O\",\n                \"O\", \"P\"\n)\n\nnodes_df &lt;- tribble(\n                ~name,   ~tipus,\n                \"A\", \"bátor\",\n                \"B\", \"bátor\",\n                \"C\", \"bátor\",\n                \"D\", \"bátor\",\n                \"E\", \"bátor\",\n                \"K\", \"bátor\",\n                \"M\", \"bátor\",\n                \"N\", \"bátor\",\n                \"O\", \"bátor\",\n                \"F\", \"félénk\",\n                \"G\", \"félénk\",\n                \"H\", \"félénk\",\n                \"I\", \"félénk\",\n                \"L\", \"félénk\",\n                \"J\", \"félénk\",\n                \"P\", \"félénk\"\n)\ng &lt;- graph_from_data_frame(d = edges_df, vertices = nodes_df, directed = F)\n\n\n# alapértelmezés szerint minden címkéjének színe legyen sárga\nvlc &lt;- rep(\"yellow\", vcount(graph = g))\n# a megfelelő csúcsok címkéjének színe legyen piros\nvlc[V(g)$tipus %in% 'bátor'] &lt;- \"#FE8484\"\n# induló megjelenés\nplot(g, \n     vertex.color = vlc,\n     vertex.label.cex = .9,\n     edge.color = 'black',\n     vertex.size = 18,\n     layout = layout_nicely(g))\n\n\n\n\n\n\n\n\nA hálózat asszortativitását az {igraph} csomag assortativity() függvényével számolhatjuk ki. A függvény két bemenetet vár. Az első a gráf objektum, a második az egyes csúcsokhoz tartozó attribútumok vektora. Ha az attribútumok már numerikusak – például egy társas hálózatban egyének életkora vagy jövedelme –, akkor ezek az értékek közvetlenül használhatók. Ha az attribútumok kategorikusak, például nem vagy politikai párthovatartozás, akkor számokká kell konvertálni őket. Ez egyszerűen megtehető, ha minden attribútumszintet faktorszintekre konvertálunk: 1, 2, 3 stb. értékekké.\n\n# a \"bátor\" és \"félénk\" kategóriák kovertálása 1-re, és 2-re\nvalues &lt;- as.numeric(factor(V(g)$tipus))\n\n\n# az asszortativitás kiszámolása\nassortativity(graph = g, types1 = values)\n#&gt; [1] 0.45\n\nAz asszortativitás értéke -1 és +1 között lehet. A 0 azt jelzi, hogy nincs általános preferenciális kötődési minta. A +1 azt jelzi, hogy az egyének csak hasonló egyedekhez kötődnek, a -1 pedig azt, hogy az egyének aktívan kerülik a hasonló egyéneket. A most kapott 0,45-ös érték viszonylag magas. Ahhoz, hogy megértsük, milyen jelentős mértékben magas, randomizációs tesztet kell végeznünk.\nEgy másik gyakran számolt asszortativitási mutató a fokszám asszortativitás. Azt mutatja, hogy a magas fokú csúcsok előszeretettel kapcsolódnak-e más magas fokú csúcsokhoz. Az {igraph} csomagban az assortativity.degree() függvényt használjuk a fokszám asszortativitás kiszámolására. Az első argumentum a gráfobjektum, a második pedig részletezi, hogy a gráf irányított vagy irányítatlan.\nA példában negatív értéket kapunk a fokszám asszortativitásra, ami azt jelzi, hogy a magas fokszámú egyének inkább nem kapcsolódnak más, magas fokszámú egyénekhez.\n\n# fokszám asszortativitás kiszámítása\nassortativity.degree(graph = g, directed = FALSE)\n#&gt; [1] -0.3134328\n\nA kapcsolatok szorosságának másik mércéje az irányított hálózatokban értelmezhető kölcsönösség (reciprocitás). Egy irányított hálózat reciprocitása megegyezik a szimmetrikus élek arányával. Ez azon kimenő élek aránya, amelyeknek bejövő élük is van.\n\nlibrary(igraph)\ng2 &lt;- graph_from_literal(A--+H, A--+D, A+-+E, A+-+B, C--+A, E+-+F, F+-+D, D--+G, B--+I, B+-+C, C--+L, C--+K, K+-+J, J--+L)\nV(g2)$color &lt;- \"#FE8484\"\nplot(g2,\n     vertex.label.color = \"black\",\n     vertex.label.cex = .9,\n     edge.arrow.size = 0.4,\n     edge.arrow.width = 0.5,\n     edge.color = 'black',\n     vertex.size = 18)\n\n\n\n\n\n\n\n\n\n# élek száma\necount(g2)\n#&gt; [1] 20\n\nA példahálózatban 20 él van. 8 közülük az egyetlen él két csúcs között. A B-től I-ig tartó él egy példa. A többi 12 él kölcsönös kapcsolatban van. Van egy él J-től K-ig és K-től J-ig. Ennek a gráfnak ezért 0,6 a reciprocitása (mivel az élek 60%-a (20-ból 12) ezekben a reciprok kapcsolatokban van). Az {igraph} csomagban a reciprocitás a reciprocity() függvény segítségével számítható ki.\n\n# az irányított gráf reciprocitása\nreciprocity(g2)\n#&gt; [1] 0.6\n\n\n5.2.1 Feladat\nEbben a feladatban meghatározzuk egy korábban már használt baráti hálózat nemre vonatkozó asszertativitását. Tudjuk, ez annak a mértéke, hogy az azonos nemű csúcsok milyen mértékben kapcsolódnak egymáshoz. A fokszám asszortativitást is kiszámoljuk, amely meghatározza, hogy a csúcsok milyen mértékben kapcsolódnak más, hasonló fokú csúcsokhoz.\nKészítsünk egy feltáró ábrát a barátsági hálózat objektumról a plot() segítségével.\n\n# adatok beolvasása\nfriends2_edges_df &lt;- rio::import(file = \"adat/friends2_edges_df.xlsx\")\nfriends2_nodes_df &lt;- rio::import(file = \"adat/friends2_nodes_df.xlsx\")\n\n# igraph objektum létrehozása attribútumok felvitelével együtt\nfriends2_g &lt;- graph_from_data_frame(d = friends2_edges_df, vertices = friends2_nodes_df, directed = FALSE)\n\nFeltáró ábra készítése:\n\n# alapértelmezés szerint minden címkéjének színe legyen sárga\nvlc &lt;- rep(\"#8484fe\", vcount(graph = friends2_g))\n# a megfelelő csúcsok címkéjének színe legyen piros\nvlc[V(friends2_g)$gender %in% 'F'] &lt;- \"#FE8484\"\n# induló megjelenés\nplot(friends2_g, \n     vertex.color = vlc,\n     vertex.label.cex = .9,\n     edge.color = 'black',\n     vertex.size = 18,\n     layout = layout_nicely(friends2_g))\n\n\n\n\n\n\n\n\nKonvertáljuk az egyes csúcsok “nem” attribútumait számmá a factor(), majd az as.numeric() használatával.\n\n# a nem numerikussá konvertálása\nvalues &lt;- as.numeric(factor(V(friends2_g)$gender))\n\nSzámítsuk ki a nemek alapján az asszortativitást az assortativity() függvény segítségével. Az első argumentum a gráfobjektum, a második paraméter a számokká konvertált nemek lesznek.\n\n# a nem alapján számolt asszortativitás kiszámítása\nassortativity(friends2_g, values)\n#&gt; [1] 0.1319444\n\nSzámítsuk ki a hálózat fokszám asszortivitását az assortativity.degree() segítségével. Az első argumentum a gráf objektum lesz.\n\n# A fokszám asszortativitás kiszámítása\nassortativity.degree(friends2_g, directed = FALSE)\n#&gt; [1] 0.4615385\n\n\n\n5.2.2 Feladat\nA randomizált megoldásokat az asszortativitás értékelésére is felhasználhatjuk.\nHasználjuk az assortativity() függvényt a friends2_g gráfobjektum asszortativitásának kiszámításához nemek alapján. Rendeljük hozzá ezt az értéket a observed.assortativity objektumhoz.\n\n# számoljuk ki a megfigyelt asszortativitást\nobserved.assortativity &lt;- assortativity(friends2_g, values)\n\nEgy for cikluson belül számítsuk ki a friends2_g hálózat asszortativitását az assortativity() segítségével, miközben véletlenszerűen módosítjuk a values objektum értékét a sample() segítségével. A sample() használata véletlenszerűen módosítja az egyes csúcsok nemét (azaz a nemnek megfelelő numerikus értékeket).\n\n# számoljunk ki 1000 nemre vonatkozó asszortativitást, amelyben a nem véletlenszerűen lett a személyekhez rendelve\nresults &lt;- vector('list', 1000)\nfor(i in 1:1000){\n  results[[i]] &lt;- assortativity(friends2_g, sample(values))\n}\n\nA fenti a permutációs eljárás után, ábrázoljuk az asszortativitási értékek eloszlását a hist() segítségével, és adjunk hozzá egy piros függőleges vonalat a megfigyelt asszortativitási értéknek megfelelően (observed.assortativity).\n\n# rajzoljuk meg az asszortativitás eloszlását, és adjuk hozzá a piros vonalként a megfigyelt asszortativitást\nhist(unlist(results))\nabline(v = observed.assortativity, col = \"red\", lty = 3, lwd=2)\n\n\n\n\n\n\n\n\n\n\n5.2.3 Feladat\nAz irányított hálózat reciprocitása a szimmetrikus élek arányát tükrözi. Ez nem más, mint azon kimenő élek aránya, amelyeknek bejövő élük is van. Általában annak meghatározására használják, hogy az irányított hálózatok mennyire kapcsolódnak egymáshoz. Egy ilyen hálózatra példa lehet a csimpánzok ápolása. Egyes csimpánzok ápolgathatnak egy másikat, de az adott egyed nem ápolja őket, míg más csimpánzok ápolhatják egymást, és így kölcsönös kötelék alakul ki.\nEbben a feladatban egymást ápoló csimpánzok hálózatát készítjük el (chimp_g). Készítsünk ábrát a plot() segítségével. Állítsa a nyíl méretét 0,4-re az edge.arrow.size= argumentum használatával, a nyíl szélességét pedig 0,5-re az edge.arrow.width= argumentum használatával.\n\nchimp_g &lt;- \n  graph_from_data_frame(directed = T, d = tribble(\n    ~from,  ~to,\n         1,  15,\n         6,   1,\n         8,   1,\n         9,   1,\n        11,   1,\n        12,   1,\n         3,   2,\n         5,   2,\n         7,   2,\n         12,  2,\n          2,  3,\n          4,  3,\n          5,  4,\n         10,  4,\n         13,  4,\n         14,  4,\n          3,  5,\n          6,  5,\n          9,  5,\n         10,  5,\n         13,  5,\n          3,  6,\n          8,  6,\n         15,  6,\n          1,  7,\n          3,  7,\n          9,  7,\n          8, 15,\n          9,  8,\n         13,  8,\n          5,  9,\n         12,  9,\n         13,  9,\n         14,  9,\n          1, 10,\n          2, 10,\n          3, 10,\n          4, 10,\n          7, 10,\n         11, 10,\n         12, 10,\n         14, 10,\n          3, 11,\n          6, 11,\n         14, 11,\n         15, 11,\n          4, 12,\n          6, 12,\n          9, 12,\n         12, 15,\n          3, 13,\n          7, 13,\n          8, 13,\n         12, 13,\n         14, 13,\n          3, 14,\n          4, 14,\n         10, 14,\n         11, 14))\n\n\n# hálózat megjelenítése\nplot(chimp_g,\n     edge.color = \"black\",\n     edge.arrow.size = 0.4,\n     edge.arrow.width = 0.5)\n\n\n\n\n\n\n\n\nSzámoljuk ki a gráf reciprocitását a reciprocity() segítségével.\n\n# reciprocitás kiszámítása\nreciprocity(chimp_g)\n#&gt; [1] 0.2711864",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Speciális kapcsolatok</span>"
    ]
  },
  {
    "objectID": "05_specialis_kapcsolatok.html#közösségek-felderítése",
    "href": "05_specialis_kapcsolatok.html#közösségek-felderítése",
    "title": "5  Speciális kapcsolatok",
    "section": "5.3 Közösségek felderítése",
    "text": "5.3 Közösségek felderítése\nA fejezetben használt függvények:\n\ncluster_fast_greedy() - fast greedy modularitás eljárás\ncluster_edge_betweenness() - él közöttiség modularitásai eljárás\n\nA klikkek azonosítása, valamint az asszortativitás és reciprocitás kiszámítása bizonyos információkkal szolgál számunkra a hálózat csúcs-kapcsolódási mintáiról. Ennek még formálisabb megközelítési módja a közösségek felderítése.\nHa egy hálózatról azt mondják, hogy közösségi struktúrával rendelkezik, akkor lehetőség van egyedi csúcshalmazok azonosítására. Az egyes csúcshalmazokon belül a tagok közötti kapcsolatok sűrűbbek lesznek, mint ami a különböző csúcshalmazok közötti kapcsolatokra jellemző.\n\nlibrary(tidyverse)\nlibrary(igraph)\n\nedges_df &lt;- tribble(\n                ~from,   ~to,\n                \"A\", \"B\",\n                \"A\", \"C\",\n                \"A\", \"D\",\n                \"A\", \"E\",\n                \"A\", \"F\",\n                \"A\", \"P\",\n                \"B\", \"C\",\n                \"B\", \"E\",\n                \"C\", \"D\",\n                \"C\", \"E\",\n                \"D\", \"J\",\n                \"J\", \"H\",\n                \"J\", \"G\",\n                \"J\", \"K\",\n                \"G\", \"H\",\n                \"G\", \"K\",\n                \"G\", \"I\",\n                \"G\", \"L\",\n                \"I\", \"L\",\n                \"K\", \"M\",\n                \"L\", \"M\",\n                \"M\", \"N\",\n                \"M\", \"O\",\n                \"M\", \"P\",\n                \"P\", \"O\",\n                \"N\", \"O\"\n)\n\nnodes_df &lt;- tribble(\n                ~name,   ~tipus,\n                \"A\", \"1\",\n                \"B\", \"1\",\n                \"C\", \"1\",\n                \"D\", \"1\",\n                \"E\", \"1\",\n                \"F\", \"1\",\n                \"J\", \"2\",\n                \"G\", \"2\",\n                \"H\", \"2\",\n                \"I\", \"2\",\n                \"K\", \"2\",\n                \"L\", \"2\",\n                \"M\", \"3\",\n                \"N\", \"3\",\n                \"O\", \"3\",\n                \"P\", \"3\"\n)\ng3 &lt;- graph_from_data_frame(d = edges_df, vertices = nodes_df, directed = F)\n\n\n# alapértelmezés szerint minden címkéjének színe legyen sárga\nvlc &lt;- rep(\"yellow\", vcount(graph = g3))\n# a megfelelő csúcsok címkéjének színe legyen piros\nvlc[V(g3)$tipus %in% '3'] &lt;- \"#FE8484\"\nvlc[V(g3)$tipus %in% '1'] &lt;- \"#8484fe\"\n# induló megjelenés\nplot(g3, \n     vertex.color = vlc,\n     vertex.label.cex = .9,\n     edge.color = 'black',\n     vertex.size = 18,\n     layout = layout_nicely(g3))\n\n\n\n\n\n\n\n\nA fenti hálózatban látható, hogy a 16 csúcs három csoportba sorolható. Az egyes csoportokon belül – piros, kék és sárga – a csúcsok sokkal nagyobb valószínűséggel kapcsolódnak más, azonos színű csúcsokhoz, mint a nem saját csoporthoz tartozó csúcshoz. Gyakran az ilyen típusú csoportokat „közösségeknek” nevezik, bár területtől függően „moduloknak”, „csoportoknak” vagy „klasztereknek” is nevezhetők. Valós hálózatokban a közösségi struktúrák nagyon gyakoriak, és a közösségek észlelés nagyon hasznos lehet, különösen nagy hálózatokban, mivel segít azonosítani a hálózat funkcionális alegységeit. Ilyenek például a középiskolai hálózatban működő klikkek is.\nA közösségészlelés mögött meghúzódó általános elv viszonylag egyszerű: azonosítani kell azokat a csúcsokat, amelyek szorosabban kötődnek egymáshoz, mint a többihez a hálózatban, Azonban közösségek megtalálása nagyon számításigényes, különösen nagy hálózatok esetén. Ennek ellenére számos algoritmust fejlesztettek ki, és az {igraph} csomag is több lehetőséget tartalmaz. Saját adataink alapján érdemes több módszert is kipróbálni hogy melyik tűnik a leghasznosabbnak, ugyanis mindegyik algoritmusnak más az erőssége és a gyengesége.\nEbben a részben két különböző eljárást fogunk használni: a fast greedy modularitás eljárást és az él közöttiség modularitásai eljárást. A fast greedy úgy működik, hogy egyre nagyobb közösségeket próbál építeni úgy, hogy minden közösséghez egyenként hozzáadja a csúcsokat, és minden lépésnél modularitási pontszámot mér. A modularitási pontszám annak mutatója, hogy az egymással összefüggő élek hogyan viszonyulnak egymáshoz a közösségeken belül, illetve a közösségek között. Az {igraph} csomagban a cluster_fast_greedy() függvény a bemenő gráfobjektumra elvégzi a fenti eljárást.\n\n# fast greedy modularitás eljárást\ncluster_fast_greedy(g3)\n#&gt; IGRAPH clustering fast greedy, groups: 3, mod: 0.5\n#&gt; + groups:\n#&gt;   $`1`\n#&gt;   [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\"\n#&gt;   \n#&gt;   $`2`\n#&gt;   [1] \"J\" \"G\" \"H\" \"I\" \"K\" \"L\"\n#&gt;   \n#&gt;   $`3`\n#&gt;   [1] \"M\" \"N\" \"O\" \"P\"\n#&gt; \n\nAz outputban láthatók az egyes közösségek, és az egyes csúcsok közösségi tagsága is.\nA fast greedy eljárással szemben az él közöttiség modularitásai eljárás egy felosztó módszer, amely úgy működik, hogy a hálózatot egyre kisebb darabokra osztja, amíg olyan éleket nem talál, amelyeket “hídnak” tekint a közösségek között.\n\n# él közöttiség modularitásai eljárás\ncluster_edge_betweenness(g3)\n#&gt; IGRAPH clustering edge betweenness, groups: 3, mod: 0.5\n#&gt; + groups:\n#&gt;   $`1`\n#&gt;   [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\"\n#&gt;   \n#&gt;   $`2`\n#&gt;   [1] \"J\" \"G\" \"H\" \"I\" \"K\" \"L\"\n#&gt;   \n#&gt;   $`3`\n#&gt;   [1] \"M\" \"N\" \"O\" \"P\"\n#&gt; \n\nAz output a fentiekkel megegyezik.\nTovábbi függvényekkel a közösségre vonatkozó információk is kinyerhetők. Minden közösségészlelési eljárás több információt állít elő egy közösségi objektumban. A length(), sizes() és a membership() függvények segítségével gyorsan kinyerhető információ arról, hogy hány közösség van, hány eleműek a közösségek, és mely csúcsok tartoznak az adott közösséghez.\n\n# a fast greedy eljárás eredményének elmentése az x objektumba\nx &lt;- cluster_fast_greedy(g3)\n\n\n# közösségek száma\nlength(x)\n#&gt; [1] 3\n\n\n# az egyes közösségek létszáma\nsizes(x)\n#&gt; Community sizes\n#&gt; 1 2 3 \n#&gt; 6 6 4\n\n\n# az egyes csúcsok tagsága\nmembership(x)\n#&gt; A B C D E F J G H I K L M N O P \n#&gt; 1 1 1 1 1 1 2 2 2 2 2 2 3 3 3 3\n\nAz {igraph} csomagban lehetőség van a hálózatról egyszerű diagramok készítésére is, amelyek színnel mutatják meg a közösség minden csúcsát. Ehhez a közösségi objektumot és a gráfobjektumot kell szerepeltetni a plot() függvényben.\n\n# közösségek megjelenítése\nplot(x, g3)\n\n\n\n\n\n\n\n\n\n5.3.1 Feladat\nAz első közösségészlelési módszer, amelyet kipróbálunk, a fast greedy közösségészlelés. A Zachary Karate Club hálózatát fogjuk használni. Ez a közösségi hálózat 34 klubtagot és 78 élt tartalmaz. Mindegyik él azt jelzi, hogy az a két klubtag a karate klubon kívül és a klubban is érintkezett. A hálózat segítségével meghatározhatjuk, hogy hány alközösség van a hálózatban, és mely klubtagok melyik alcsoporthoz tartoznak. A hálózatokat a közösségi tagság alapján is megrajzolhatjuk.\nHozzuk létre a hálózatot és jelenítsük meg.\n\nclub_g &lt;- \n  graph_from_data_frame(directed = F, d = tribble(\n    ~from,  ~to,\n    1,  2,\n    1,  3,\n    1,  4,\n    1,  5,\n    1,  6,\n    1,  7,\n    1,  8,\n    1,  9,\n    1, 11,\n    1, 12,\n    1, 13,\n    1, 14,\n    1, 18,\n    1, 20,\n    1, 22,\n    1, 32,\n    2,  3,\n    2,  4,\n    2,  8,\n    2, 14,\n    2, 18,\n    2, 20,\n    2, 22,\n    2, 31,\n    3,  4,\n    3,  8,\n    3, 28,\n    3, 29,\n    3, 33,\n    3, 10,\n    3,  9,\n    3, 14,\n    4,  8,\n    4, 13,\n    4, 14,\n    5,  7,\n    5, 11,\n    6,  7,\n    6, 11,\n    6, 17,\n    7, 17,\n    9, 31,\n    9, 33,\n    9, 34,\n   10, 34,\n   14, 34,\n   15, 33,\n   15, 34,\n   16, 33,\n   16, 34,\n   19, 33,\n   19, 34,\n   20, 34,\n   21, 33,\n   21, 34,\n   23, 33,\n   23, 34,\n   24, 26,\n   24, 28,\n   24, 33,\n   24, 34,\n   24, 30,\n   25, 26,\n   25, 28,\n   25, 32,\n   26, 32,\n   27, 30,\n   27, 34,\n   28, 34,\n   29, 32,\n   29, 34,\n   30, 33,\n   30, 34,\n   31, 33,\n   31, 34,\n   32, 33,\n   32, 34,\n   33, 34))\nplot(club_g)\n\n\n\n\n\n\n\n\nHasználjuk a cluster_fast_greedy() függvényt egy közösségi objektum létrehozásához. Rendeljük ezt a kc objektumhoz.\n\n# fast greedy közösségészlelési eljárás\nkc &lt;- fastgreedy.community(club_g)\n\nHasználjuk a sizes() függvényt a kc objektumon annak meghatározására, hogy hány közösséget észleltek, és hány klubtag van mindegyikben.\n\n# közösségek száma és létszáma\nsizes(kc)\n#&gt; Community sizes\n#&gt;  1  2  3 \n#&gt;  8 17  9\n\nA membership() függvény segítségével jelenítsük meg, hogy mely klubtagok melyik közösséghez tartoznak.\n\n# melyik klubtag, melyik közösséghez tartozik\nmembership(kc)\n#&gt;  1  2  3  4  5  6  7  9 10 14 15 16 19 20 21 23 24 25 26 27 2...\n#&gt;  1  3  3  3  1  1  1  2  3  3  2  2  2  1  2  2  2  2  2  2  ...\n#&gt; 30 31 32 33  8 11 12 13 18 22 17 34 \n#&gt;  2  2  2  2  3  1  1  3  3  3  1  2\n\nAz alapértelmezett közösségi ábra létrehozásához az ismert plot() függvényt használhatjuk. Az első argumentum a kc objektum, a második argumentum pedig a club_g gráfobjektum.\n\n# a közösségeket tartalmazó hálózati ábra\nplot(kc, club_g)\n\n\n\n\n\n\n\n\n\n\n5.3.2 Feladat\nAlternatív közösségészlelési módszer az él közöttiség eljárás. Ebben a feladatban megismételjük a karate klub közösségészlelését, de most ezzel a módszerrel, majd vizuálisan összehasonlítjuk az eredményeket a fast greedy módszerrel kapott közösségekkel.\nHasználjuk a cluster_edge_betweenness() függvényt a club_g gráf objektumon, és a gc objektumban tároljuk el az eredményt.\n\n# él közöttiség eljárás futtatása\ngc &lt;- cluster_edge_betweenness(club_g)\n\nHatározzuk meg a közösségek nagyságát és számát.\n\n# a közösségek létszáma\nsizes(gc)\n#&gt; Community sizes\n#&gt;  1  2  3  4  5 \n#&gt; 10  6  5 12  1\n\nKét ábrát a par(mfrow = c(1, 2)) segítségével tudunk egymás mellé helyezni. Az első diagram az előző kc közösségi objektumot, a második a jelen gc közösségi objektumot tartalmazza.\n\n# közösségészlelés két módszerrel\npar(mfrow = c(1, 2)) \nplot(kc, club_g)\nplot(gc, club_g)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Speciális kapcsolatok</span>"
    ]
  },
  {
    "objectID": "05_specialis_kapcsolatok.html#interaktív-hálózatok",
    "href": "05_specialis_kapcsolatok.html#interaktív-hálózatok",
    "title": "5  Speciális kapcsolatok",
    "section": "5.4 Interaktív hálózatok",
    "text": "5.4 Interaktív hálózatok\nA fejezetben használt függvények:\n\ngraphjs() - interaktív vizualizáció a {threejs} csomagból\n\nEddig ebben a kurzusban az {igraph} csomag segítségével készítettünk ábrákat a hálózatokról. Láttuk, ezek az ábrák gyorsan és viszonylag egyszerűen elkészíthetők. Sok más R csomag is létezik azonban, amelyek hálózatok vizualizációját segítik. Például {statnet}, {ggnet}, {ggnetwork}, {ggraph}, {visNetwork}, {networkD3}, {sigma} és a {threejs}. Mindegyiknek megvan a maga erőssége és gyengesége. Egyesek nagyobb hálózatokhoz, mások kisebb hálózatokhoz hasznosak. Egyesek nagyon jók statikus grafikonok készítésére, míg mások jobban alkalmasak olyan vizualizációk készítésére, amelyekkel a felhasználó interakcióba léphet. Például úgy, hogy a csúcsok fölé vihetjük az egérmutatót, és így további információkat kaphatunk az egyénekről, vagy akár dinamikusan mozgathatjuk a hálózatot. Fenti lehetőségek közül több integrálva van JavaScript-könyvtárakkal.\nJelen alfejeztben megtudhatjuk, hogyan készíthetünk interaktív hálózati diagramokat a {threejs} csomag használatával. Ez a csomag különösen hasznos nagy hálózatok megjelenítéséhez, és nagyon jól integrálható az {igraph} csomaggal. Amikor létrehozzuk ezeket a vizualizációkat, használhatja az egeret a hálózat elforgatására, nagyítására és kicsinyítésére, valamint a csúcsok mozgatására. Ha a csúcsok fölé viszük az egeret, az egy felugró szövegen keresztül felfedi az egyén adatait.\nAlapvető vizualizáció létrehozásához alkalmazzuk a graphjs() függvényt egy igraph objektumra. Ez egy teljesen interaktív hálózatot hoz létre.\n\n# library(threejs)\n# graphjs(g3)\n\nA csúcsok neveinek hozzáadásához és a színek megváltoztatásához mindössze annyit kell tennünk, hogy beállítja a megfelelő csúcsattribútumokat az igraph objektumban.\n\n# csúcsnevek beállítása\ng3 &lt;- set_vertex_attr(g3, \n                      \"label\", \n                      value = V(g3)$name)\n# csúcsok színeinek beállítása\ng3 &lt;- set_vertex_attr(g3, \n                      \"color\", \n                      value = 'mistyrose')\n\n# graphjs(g3, vertex.size = 1)\n\nA graphjs() függvényen belül az ábra sok aspektusa megváltoztatható. A fenti példában megváltoztatjuk a csúcsméretet. Ha a csúcs fölé visszük az egeret, meg fog jelenni a csúcs címkéje.\n\n5.4.1 Feladat\nEddig kizárólag az {igraph} csomagot használtuk az alapvetően statikus hálózati diagramok elkészítéséhez. Számos csomag áll azonban rendelkezésre hálózati ábrák készítéséhez. Az egyik nagyon hasznos csomag a {threejs}, amely lehetővé teszi interaktív hálózati vizualizációk készítését. Ez a csomag is zökkenőmentesen integrálható az {igraph} csomaggal. Ebben a feladatban elkészítjük a karate klub hálózatának alapszintű interaktív hálózati megjelenését a {threejs} csomag segítségével. Miután elkészítettük a vizualizációt, mozgassuk a hálózatot az egérrel. Képesnek kell lennünk a hálózat kicsinyítésére és nagyítására, valamint a hálózat elforgatására.\nElőször a set_vertex_attr() használatával hozzunk létre egy új csúcs attribútumot color néven, ami a dodgerblue értéket vegye fel.\n\nlibrary(igraph)\nlibrary(threejs)\n\n# beállítjuk a csúcsok 'color' attribútumát 'dodgerblue'-re \nclub_g &lt;- set_vertex_attr(club_g, \"color\", value = \"dodgerblue\")\n\nÁbrázoljuk a club_g hálózatot a {threejs} graphjs() függvényével. Az első argumentum a club_g gráfobjektum legyen. Állítsuk a csúcs méretét 1-re.\n\n# rajzoljuk meg a hálózatot 1-es csúcsmérettel\n# graphjs(club_g, vertex.size = 1)\n\n\n\n5.4.2 Feladat\nA hálózatok megjelenítése során érdemes módosítani a csúcsok méretét, ezzel szemléltethetjük a relatív fontosságukat. Ez a {threejs} csomagban is elvégezhető. Ebben a feladatban létrehozunk egy interaktív {threejs} diagramot a karate klub hálózatról úgy, hogy a csúcsok méretét a relatív sajátvektor centralitásukra alapozzuk.\nSzámítsa ki az egyes csúcsok sajátvektor centralitását az eigen_centrality() segítségével, és tároljuk az értékeket az ec objektumban.\n\n# sajátvektor centralitások vektora \nec &lt;- as.numeric(eigen_centrality(club_g)$vector)\n\nAz sqrt() használatával az ec értékeiből hozzunk létre egy új v vektort, amely egyenlő az eredeti sajátvektor centralitás négyzetgyökének ötszörösével.\n\n# sajátvektor centralitások négyzetgyökének ötszörösét számoljuk\nv &lt;- 5*sqrt(ec)\n\nÁbrázoljuk a hálózatot a {threejs} csomag graphjs() függvényének használatával, és állítsuk be a vertex.size= argumentumot a v értékeire.\n\n# interaktív megjelenítés\n# graphjs(club_g, vertex.size = v)\n\n\n\n5.4.3 Feladat\nVégül ebben az utolsó feladatban egy olyan interaktív ábrát fogunk létrehozni, amely a közösségi tagságuk alapján színezi a csúcsokat. A közösségek észlelését a fast greedy módszerrel végezzük el.\nHasználjuk a membership() függvényt a kc közösségi igraph objektumon, így létrehozzunk egy i vektort az egyes csúcsok közösségek tagságáról.\n\n# az i objektum a csúcsok tagságát fogja tartalmazni\ni &lt;-  membership(kc)\n\nEllenőrizzük, hogy hány közösség van a sizes() függvény segítségével a kc közösségi igraph objektumban.\n\n# meggyőződünk, hogy 3 csoport van, így 3 színre lesz szükségünk\nsizes(kc)\n#&gt; Community sizes\n#&gt;  1  2  3 \n#&gt;  8 17  9\n\nA set_vertex_attr() segítségével adjunk hozzá egy color nevű csúcsattribútumot a club_g gráfobjektumhoz. A hozzáadandó értékek az i objektumhoz rendelt tagságon alapuló színek lesznek.\n\n# a csúcsok színének beállítása a közösségi tagságuk alapján\nclub_g &lt;- set_vertex_attr(club_g, \"color\", value = c(\"yellow\", \"blue\", \"red\")[i])\n\nÁbrázolja a háromdimenziós gráfot a graphjs() függvény segítségével.\n\n# interaktív megjelenítés\n# graphjs(club_g)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Speciális kapcsolatok</span>"
    ]
  },
  {
    "objectID": "06_kitekintes.html",
    "href": "06_kitekintes.html",
    "title": "6  Kitekintés",
    "section": "",
    "text": "6.1 Szociometria\nA következő összefoglaló nem teljes, a részletes áttekintésekért érdemes a szakirodalmat tanulmányozni:\nA szociometria módszere alkalmas egy kis csoport tagjai közötti érzelmi kapcsolatok struktúrájának objektív felmérésére és a csoporttagok szociális pozíciójának feltérképezésére.\nHárom változatát dolgozták ki:\nA több szempontú szociometriai felmérés lépései\nA csoport működésének helyszínén (pl. osztályterem, edzés helyszíne) minden tag legyen jelen a kérdőív kitöltésekor!",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Kitekintés</span>"
    ]
  },
  {
    "objectID": "06_kitekintes.html#szociometria",
    "href": "06_kitekintes.html#szociometria",
    "title": "6  Kitekintés",
    "section": "",
    "text": "Mérei (1998)\nHoffmann és mtsai. (2023)\nHoffman és mtsai. (2022)\nSallay & Perge (2007)\nN. Kollár (2017)\n\nKeszi & Lohner (2022)\nKürtösi (2011)\n\n\n\n\negy szempontú szociometria (Moreno 1934) – rokonszenvi kérdések.\ntöbb szempontú szociometria (Mérei) – rokonszenvi, közösségi funkcióra, egyéni tulajdonságokra/készségekre/képességekre, népszerűségre/közösségi helyzetre/érvényesülésre vonatkozó kérdések.\nhiearchikus szociomteria (Járóka, Veres 1978)– még differenciáltabb kategória rendszer.\n\n\n\nVizsgálandó csoport jellemzői\n\nA vizsgálat elvégzése előtt tájékozódunk a csoport életről: közös élmények, a csoportra váró fontos események, feladatok, az együttlétek lefolyása, stb.(A kérdések megfogalmazásánál ez fontos támpont lesz!)\n10-20 fős csoport, akik minimum 1 hónapja, napi rendszerességgel vagy minimum 6 hónapja heti rendszerességgel vannak együtt(pl. idősek klubja, iskolai osztály, sportolói csapat, munkahelyi team stb.)\n\nVizsgálat elvégzésének feltételei\n\n\n\nSzociometriai kérdéssor összeállításának kritériumai\n\nAz instrukcióban jelöljék meg, hogy:\n\na tanulmányaikhoz kérik a kitöltő segítségét,\naz adott közösségre vonatkozó kérdéseket fognak feltenni,\na kérdésekre a közösség tagjainak nevével kell a kitöltőnek válaszolnia, minden kérdésre legfeljebb 3 társanevét írhatja be azonosíthatóan(ezt a kérdéseket követő három pontozott sorral/vonallal lehet jelölni),\nugyanakkor biztosítsák arról, hogy válaszait bizalmasanfogják kezelni, az anonimitás szabályait betartva a házi dolgozatban már nem lesznek beazonosíthatóak a megkérdezettek!\n\nA kérdések megfogalmazásakor konkretizálni kell a csoportra vonatkozóan a kérdések tartalmát (életkori sajátosságok + a csoport által reálisan átélhető és konkrét helyzetek). pl. Ha kisbusszal utazik a csapat egy-egy mérkőzés helyszínére, akkor ezt az információt építsük be a rokonszenvi kérdésbe: Ha a csapat egyik mérkőzése egy távolabbi településen van, az utazás során ki mellé ülne szívesen a buszon?\n\n\n\n6.1.1 Moreno szociometriája\nMoreno vizsgálta először a társas alakzatokat, és abban határozta meg az egyén helyét. Előtte is felismerték már a kiscsoportok jelentőségét, de a vizsgálatok egyénközpontúak maradtak, a társas vonatkozásokat személyiségjegyként kezelték. Moreno nem az egyén alkalmazkodási módját vagy kontaktuskészségét próbálta megragadni, hanem beilleszkedését a társas mezőbe, amelyben él. A beilleszkedést nem személyiségjegyekkel, hanem a személy társas pozíciójával határozta meg. A közösségek feltárására és leírására dolgozta ki a szociometriát.\n1925-ben Moreno megérkezik az USA-ba. Cooley, Allport és Sherif szociápszchológiai vizsgálatai is hatottak Morenora\n\n6.1.1.1 A Hudson-i elmélet\nMoreno első nagyszabású vizsgálata a New York államban levő Hudson Intézet volt. Rendeltetését tekintve a mi egykori javítóintézeteinknek felelt meg. Serdülőkorú lányokat bírósági határozat alapján helyeztek oda többéves átnevelésre. A telepen 5-600 lány élt, 16 pavilonban, és mintegy 100 főnyi személyzet (nevelők, műhelyvezetők, szakmunkások stb.). Iskola, templom, kórház, műhelyek, mosoda, több gazdasági épület és egy majorság tartozott a telephez. Egy pavilonban átlagosan 30 lány élt, mintegy családot alkotva, egy családanya-nevelőnőnek (“gouvernante”-nak) a vezetésével. Minden pavilonnak saját háztartása volt; néhány lány egy közülük való vezetővel a házimunkát végezte, a többiek műhelyben dolgoztak vagy iskolába jártak. A fekete bőrű lányok külön pavilonokban laktak, de a munkahelyükön és az iskolában együtt voltak a fehérekkel.\nA szociometriai vizsgálat időpontjában 505 lány élt a telepen. Összehívták őket azzal az utasítással, hogy új lakásbeosztás készül, és maguk választhatják meg lakótársaikat. Írják fel rangsorban annak az öt lánynak a nevét, akivel együtt szeretnének lakni, tekintet nélkül arra, hogy azok éppen melyik pavilonban laknak. Valamennyi társuk jelen van, jól nézzenek körül, és így döntsék el, kikkel akarnak együtt élni.\nA válaszokat mindenekelőtt személyek szerint dolgozták fel. Minden lányról kartoték készült; ezen feltüntették az ő választásait, a rá eső választásokat, továbbá egy kikérdezés anyagát. A kikérdezésben a lány véleményt mondott azokról, akiket ő választott, és azokról, akik őt választották. Választását és véleményét meg kellett indokolnia. Ebből a kartotékrendszerből készült a “társas atomok” vázlata.\nMoreno rendszerének egyik alapfogalma a társas atom – egy személy valamennyi kölcsönös, tőle kiinduló és felé irányuló kapcsolata. Középpontja maga a vizsgált személy, határai a választások, töltése a motiváció. Ez a társas helyzet értelmezésének az alapanyaga. A Hudson-vizsgálat egyik társas atomját például Moreno így értelmezi: A leánynak (H. T.) a vonzereje igen nagy, 16 személyt vonz; közülük 10-et a saját csoportjából, 6-ot más csoportokból. Ő maga a saját csoportjából 6-ot választ, 5-öt elutasít, 1 közömbös neki. Feltűnő, hogy a saját csoportjának hozzá vonzódó tagjai közül sokat határozottan elutasít. Csoportjában kötődései szélsőségesek, tehát a csoportjához nehezen alkalmazkodik. Társas vonzereje nyilván jobban lenne értékesíthető egy másik pavilonban.\nA társas pozíciónak az “atomképlet” szerinti értelmezésében Moreno számos paramétert alkalmaz. Ezeknek alapanyaga a választásoknak és az elutasításoknak az aránya, ennek az aránynak a megoszlása a választó saját csoportja (saját lakóhelye, lakószobája, munkahelye, iskolai osztálya stb.) és a külső csoportok között. Moreno ebből olyan mutatókat fejt ki, mint az expanzivitás (a személy választási köre), a vonzerő (a rá eső választások száma), s főként ezek megoszlása a saját csoportja és az idegen csoportok között.\nEzek a mutatók olyan skálán határozták meg a személy társas helyzetét, amelynek egyik végpontja a népszerűség, a sztárpozíció, másik végpontja a kitaszítottság volt. Moreno hajlott arra, hogy a szociometriai választást úgy tekintse, mint a társas helyzetek érvényes hierarchiájának a kifejezését.\nA népszerűség fokát azonosította a vezető szereppel.\nAz értelmezés második mozzanata a kölcsönösségek alapján felvázolt hálózatnak az elemzése. A Hudson-vizsgálatban a megkérdezetteknek közel 10%-a nem felelt a kérdésre, további 10%-nak a választása nem volt kölcsönös. A többi – 387 lány – a kölcsönös választások alapján összefüggő hálózatot alkotott. Kisebb-nagyobb csoportok rajzolódtak ki, ezeket láncok kötötték össze, s az elágazásokat csillagok jelezték. Ez a hálózat volt Moreno szerint az a csatornarendszer, amelyen végigfutottak a különféle áramlatok: a társadalmi eseményekre vonatkozó hírek, a munkával vagy az iskolával összefüggő várakozások, a konfliktusok és pletykák. Ezen a hálózaton futottak végig a szexuális csábítások, és jól követhető volt a faji kérdésekben való állásfoglalások útja is.\nKísérletileg is valószínűsítették azt, hogy a szociometriai hálózat az indulati áramlásnak és a hírközlésnek a csatornarendszere. Egy pszichológus, a kísérleti tervnek megfelelően, az egyik munkahelyen összeszólalkozott egy lánnyal. Mivel ez volt az első ilyen konfliktus, alkalmasnak látszott arra, hogy híre elterjedjen. A lány egyébként nagyszámú kapcsolatával a telep társas életének egyik kulcsalakja volt. Az epizód után időről időre “próbafúrást” végeztek: beszélgetések során közvetett, terelő kérdésekkel igyekeztek megállapítani, hogy a hálózat különböző pontjain elhelyezkedő lányok tudnak-e már a konfliktusról. A hír a főszereplő csillagszerűen szétágazó, több mint 20 kapcsolatán át terjedt tovább. Nem volt ugrás! Az összeszólalkozás híre nem jutott el olyan személyhez, aki hálózati helye szerint még nem volt soron. Ugyancsak a vizsgálat időszakában az egyik lány, T. L. egy áruházba ment vásárolni. Ott lopott valamit, rajtakapták. Mivel az intézetből senki más nem volt az áruházban, amikor rajtacsípték, a hír csak rajta keresztül terjedhetett el. 24 óra múlva csak néhány közeli barátnője tudott az eseményről, 1 hét múlva már 86 vele egy csoportosulásba tartozó személy. A hálózaton távolabb elhelyezkedő csoportokhoz viszont nem jutott el az áruházi lopás híre.\nMoreno azt az álláspontját, hogy a hálózat az indulati áramlások csatornarendszere, a hudsoni szökések elemzésével is alátámasztotta. Egy időszakban két hét alatt 14 lány szökött meg (a szám rendkívül magas, mert a megelőző 7 hónapban összesen 10 szökés fordult elő). Kiderült, hogy a 14 lány ugyanabba a hálózati egységbe tartozott. A szökéssorozat azzal kezdődött, hogy az egyik lány megszökött, elfogták, visszavitték. A szökés ténye és története erősen fokozta a lány népszerűségét: az addig csaknem magányos lánynak négy jó barátnője lett. Összetartozásuk növelte népszerűségüket. A szökéshez tartozó vállalkozási kedv a szociogramon jól követhető kapcsolatok csatornáin át terjedt, abban a hálózati körben, amelybe az elfogott és visszahozott lány öttagú csoportja tartozott.\nIlyen elemzések alapján állapítja meg Moreno, hogy “a hálózat a közvélemény boszorkánykonyhája; ennek csatornáin át befolyásolják, nevelik és pusztítják egymást az emberek”.\n\n\n\n6.1.2 Több szempontú szociogram\nMérei Ferenc 132. oldal: “Olyan szociometriát igyekeztem kialakítani, amely a közösséget méri fel; nemcsak az egyén helyét mutatja meg a társas mezőben, hanem magát a közösséget jellemzi, …”\nOlyan kérdések megválaszolását tűzte ki célul:\n\n“van-e esály arra, hogy a vizsgált közösségben közvélemény alakuljon ki, és közös normák jöjjenek létre”\n“olyan-e a közösség, hogy a tagok örömmel tartoznak bele, és ragaszkodnak hozzá”\n“milyen indítékok vezérelhetik a kiscsoportokat, a párokat, az egész hálózatot a csoportdinamikai kérdésekben”\n\nEzen célokkal alakította ki Mérei a több szempontú szociogram technikát. Az a célkitűzés vezetette, hogy a szociálpszichológia nyelvén tudjon leírni egy közösséget, s hogy a meghatározás paraméterei megfeleljenek a leírt közösség minőségrendjének. Olyan mikroszociológiai fogalomrendszert alakított ki, amelyben a szociometriai vizsgálatok megfogalmazhatók. Moreno, aki, mint láttuk, nem a közösséget, hanem az egyénnek a közösségben elfoglalt helyzetét határozta meg, nem is törekedett olyan mutatóknak a fogalmi kimunkálására, amelyek nem az egyénre jellemzőek, hanem a közösségre. Egyetlen kivétel ez alól a kohézió, amely a kapcsolódások sűrűségét, a tagoknak a kölcsönös kapcsolatok számával meghatározható összetartozását fejezi ki.\nA több szempontú szociogram kidolgozásához azonban ez a mutató nem volt elég. Továbbiakra volt szükség, amelyekkel a közösség funkciók szerinti tagolódása leírható, szerkezete, légköre, hierarchiája meghatározható, a közösségben kialakult ítéletek és vélemények elemezhetők.\nA több szempontú szociometriai felmérésben a vizsgált közösség minden tagja 10–40 kérdésből álló szavazólapot tölt ki. A rokonszenvi és az ellenszenvi választást kívánó kérdések mellett vannak olyanok is – s ez a lényeges eltérés Moreno technikájától –, amelyekre a közösségi rátermettség mérlegelésével kell felelni, továbbá olyan választások, amelyekkel valamilyen egyéni tulajdonság, készség, esetleg szakmai hozzáértés szempontjából kell elbírálni a közösség tagjait. Ezeket a kérdéseket is valóságos helyzetekhez kötve fogalmazzuk meg, és így a közösség tagjai áttételesen szavaznak arra, hogy ki az, aki egy bizonyos egyéni vagy társas tulajdonságot, közösségi rátermettséget magas fokon képvisel. (Például: “Ha az osztály erkölcsi kérdések elbírálására fegyelmi bizottságot alakítana, ki lenne a legalkalmasabb a vezetésére?” “Ha az edzőjük megbetegedne és egy csapattagnak kellene őt helyettesítenie, ki lenne erre a legalkalmasabb?”)\nA szociogramot, a kapcsolódások hálózatát Moreno mintájára a rokonszenvi választások (kikkel utazna egy fülkében, kinek mondaná el a titkát) kölcsönössége alapján rajzoljuk meg. De a választásokat kategóriánként is összegezzük. A választás ugyanis nemcsak páros kapcsolódást fejez ki, nemcsak azt mutatja meg, hogy kik tartoznak össze, ki kivel szeret együtt lenni, hanem azt is, hogy az adott közösségben kivel, hányan szeretnének együtt lenni, hány szavazatot kap egy-egy tag az egyes választási kategóriákban. A közösség álláspontjáról kapunk így információt: ha a választások szóródása nem túl nagy, ez a közvélemény egyik áramlatának felel meg; nagyon kis szóródás esetén magát a közvéleményt fejezi ki.\nA szervező, rendező készségekre vonatkozó szavazatok összesítése (kire bízná egy kirándulás, egy “Ki mit tud” vetélkedő megszervezését stb.) megmutatja, hogy a helyi közvélemény szerint ki a legjobb szervező a közösségben. Más kérdések összegezése megmutatja, hogy a közvélemény kiket tekint igazságosnak (fegyelmi bizottság, döntőbíró), műveltnek (“Ha olvasóköri tanácsadót szerveznének, ki látná el ezt a feladatot?”). Megint más kérdésekből megtudjuk, hogyan rangsorolják egymást a közösség tagjai a vonzó külső (melyik nő tetszik legjobban a férfiaknak, melyik férfi a nőknek), az értelmi fogékonyság (ki tudná legjobban megtanulni a modern üzemszervezésben szükséges matematikai módszereket), a fizikai adottságok (sport) stb. szempontjából.\nA kérdéseket úgy állítjuk össze, hogy a tagok a közösségük számára fontos helyzetekben mérlegeljék egymást. Például ki tudná helyettesíteni a rajvezetőt (úttörőknél), az edzőt (futballistáknál), a brigádvezetőt vagy műhelyvezetőt (üzemben), az osztályvezetőt vagy személyzeti előadót (vállalatnál).\nA lényeges a többszempontúság elvének az érvényesítése. Ez azt jelenti, hogy a választási kritériumok különféle mérlegelési szempontoknak felelnek meg: 2-3 rokonszenvi kérdés mellett (kinek mondaná el a titkát, kivel jönne össze szívesen a hivatalon, az iskolán stb. kívül is) néhány közösségi funkcióra vonatkozó kérdés is van (vezető, bíró, képviselet magasabb szervek előtt); ezeket kiegészíthetik az egyéni képességekre, a készségekre, a fiziológiaik adottságokra, a népszerűségre, a sikerességre vonatkozó kérdések.\nA választási kritériumok összeállítása is mutatja, hogy a több szempontú szociogram lényegbevágóan tér el Moreno szociometriájától. A közösségi funkciókra irányuló kérdések mindenképpen, a képességekre, a népszerűségre vonatkozóak pedig esetleg a spontán csoportosulásokon túl az intézményes (a formális) keret látható kapcsolódásairól is nyújthatnak értelmezhető adatot. Ez kitágítja a szociogram alkalmazási körét. A vezetéspszichológiában lehetővé teszi az intézményes hálózat illeszkedéseinek és egyensúlyának a megítélését, az iskolai osztályokban pedig az intézményes kiscsoportok (például úttörőőrsök) pedagógiai és társas hatékonyságairól is felvilágosítást ad. S főként támpontokat kapunk annak megítélésére, hogy az intézményes közösség látható és a spontán csoportosulás rejtett hálózata hogyan befolyásolják – hogyan segítik elő vagy hogyan akadályozzák – egymást.\nA szavazatokat gyakorisági táblázatra vezetjük rá. Ennek a táblázatnak a függőleges tengelyén a vizsgált közösség névsorát tüntetjük fel, a vízszintes tengelyre pedig a kérdéseket, melyeket az említett szempontok (rokonszenvi, funkció, népszerűség stb.) szerint csoportosítjuk. Az egyes mezőkbe az a szám kerül, amely mutatja, hogy az adott kérdésre ki hány szavazatot kapott. A vízszintes összesítéssel az egy személyre jutó pozitív és negatív szavazatok számát kapjuk meg, a függőleges oszlopok összesítése alapján pedig a szavazatok szóródását számíthatjuk ki (hány személy közt oszlanak meg egy-egy kritériumban).\nA kölcsönösségi vázlat (a szociogram) és a gyakorisági táblázat adataiból készülnek azok a mutatók, amelyekkel a vizsgált közösséget jellemezhetjük. Néhány ilyen mutatót ismertetünk.\n\nA szociogram központjának és peremének a viszonyát fejezi ki a CM - (centrális-marginális) mutató, a társas mező tagoltságának, szerkezeti színvonalának az egyik paramétere. Azt mérhetjük vele, hogy van-e az ábrázolt közösségnek központja – egy vagy több –, mekkora a központtal kapcsolatban levő, abból leágazó réteg, s végül, hogy milyen kiterjedésű a közösség pereme. A központnak mint zárt alakzatnak azért nagy a jelentősége, mert fokozza a közösségi történések feszültségét, és együttes aktusainak nagyobb felszólító jellegével terelheti, irányíthatja a közösséget – természetesen csak akkor, ha áttételeken, kommunikációs csatornákon át a közösségnek egy jó részét, legalább egynegyedét eléri. Peremnek tekintjük ebben a mutatóban a közösségnek azokat a tagjait, akik nincsenek kapcsolatban a társas mező központi alakzatával. A perem viszonyjelenség, csak a központhoz való viszonyában létezik. A CM-mutató azt fejezi ki, hogy a közösség tagjai milyen arányban oszlanak meg a központi alakzat (vagy alakzatok), az ennek befolyása alá vonható társas övezet és a perem között. A CM-mutató átlagértéke (%-ban) 20–50–30, azaz egy 40 tagú közösségben 8-an tartoznak egy vagy két központhoz, 20-an kapcsolatban vannak a központtal és 12-en alkotják a peremet.\nA jelentőségindex és a szerepmutató. A társas mező tagoltságát a közösség tagjainak a hierarchikus eloszlása és szerepszerű differenciálódása is mutatja. A hierarchikus tagolódást a jelentőségmutató fejezi ki. A szociometriai vizsgálatban a közösségnek azokat a tagjait tekintjük jelentőseknek, akik az egy személyre eső összesített szavazatok számának legalább másfélszeresét kapják. A jelentőségindex azt fejezi ki, hogy egy közösségben a tagoknak hány százaléka lépett túl ezen a küszöbön. Ezeknek a közösség fokozott társas jelentőséget tulajdonít. A szerepmutatót is a gyakorisági táblázatból számítjuk ki. Akit a társai egy bizonyos körben (például “olvasott”, “szervező”, “tetszik a férfiaknak”) az átlagnál lényegesen többször említenek, annak a közösség ezt a szerepet adta, azt ezzel az elkülönítő arculattal ruházta fel.\nA csoportlégkör mutatója. A szociometriai választások közösségi jelentősége nem egyforma. Egy közösség egyensúlyához hozzátartozik, hogy tagjai szubjektív vezérléssel, de nem a tárgyi feltételektől függetlenül tudják és merjék megválasztani intim kapcsolataikat: játszótársukat, padszomszédjukat, barátjukat. Egy közösség szociometriai választásai akkor adekvátak, ha a személyes viszonylatokban elsősorban a szubjektív motívumok irányítják a választásokat, míg a funkciók tekintetében a közösségi normákhoz igazodnak, illetve a kialakult közvélemény sugallja állásfoglalásukat. A csoportlégkör mutatójából azt olvashatjuk le, hogy egy közösségben mennyire valósult meg a választásnak ez az adekvációja, mennyiben szubjektívek a személyes és mennyiben objektívek a funkcióra vonatkozó választások. Ez oly módon jut kifejezésre, hogy szubjektív választás esetén nagy a szóródás, normavezérlésű választásnál pedig kicsi.\n\nA több szempontú szociogram lehetővé teszi a közösségi motivációs háttér elemzését. Feltárhatja azokat az értékeket, ítéleteket, normákat, amelyek a közösséget jellemezhetik. Ennek mutatóját a választási koincidenciák adják. Azt határozzuk meg, hogy az egyes kérdésekre adott válaszok milyen más kérdésre adott feleletekkel vágnak egybe, például a “Kivel laknál egy szobában?” kérdésre megadott neveket milyen más kérdésekre írta még be a személy a szavazólapján. Az egybevágásokat összegezzük, a magas koincidenciaértékeket jellegzetesnek tekintjük a közösségre. A több szempontú szociometriai technikával végzett egyéb hazai vizsgálatok is amellett szóltak, hogy az alkalmazott 15-20 mutató valóban értelmezhető.\nVastagh Zoltán például longitudinális vizsgálatában azt találta, hogy a választási egybevágások, mint motivációs mutató, kifejezhetik az osztály közösségi fejlődését. Az 5. osztályban a közösségi funkciókra adott szavazatok motivációs háttere szubjektív volt: a csapatkapitány és a bíró a barátválasztással vágott egybe. A 7. osztályban a szubjektivitást implikáló egybevágás csökkent, és a funkcióválasztásban olyan koincidenciák mutatkoztak gyakorinak, amelyek az intellektuális tulajdonságokra, az ideálválasztásra és a konformizmusra utalnak. A motivációs áthangolódás megfelel az osztály változásának, közösségi fejlődésének.\n\n\n\n\nHoffman, T., Basa, B., & N. Kollár, K. (2022). Új sztenderdek a magyar szociometriai gyakorlatban. https://doi.org/10.17627/ALKPSZICH.2022.1.67\n\n\nHoffmann, T., Basa, B., & N. Kollár, K. (2023). A többszempontú szociometria és a csoportosító szociometriai módszer különbségei, előnyei és buktatói, valamint az együttes használatukban rejlő lehetőségek. https://doi.org/10.17627/ALKPSZICH.2023.2.57\n\n\nKeszi, T., & Lohner, K. (2022). A hálózatelemzés elmélete és rendőrségi gyakorlata. Belügyi Szemle, 70(1), 69–86. https://doi.org/10.38146/bsz.2022.1.5\n\n\nKürtösi, Z. (2011). Társadalmi kapcsolathálózatok elemzése (K. Takács, Szerk.; o. 19–31). BCE Szociológia és Társadalompolitika Intézet. https://unipub.lib.uni-corvinus.hu/4699/\n\n\nMérei, F. (1998). Közösségek rejtett hálózata. Osiris Kiadó.\n\n\nN. Kollár, K. (2017). Pedagógusok pszichológiaikézikönyve, 2 (K. N. Kollár & É. Szabó, Szerk.; o. 134–192). Osiris Kiadó.\n\n\nSallay, H., & Perge, J. (2007). A szociometriai módszer alkalmazása alsó- és középfokúoktatási intézményekben (Második, módosított kiadás). ELTE PPK.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Kitekintés</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "Hivatkozások",
    "section": "",
    "text": "Barabási, A.-L. (2011). Behálózva. A hálózatok új tudománya.\nHelikon Kiadó.\n\n\nCsányi, G., & Szendrői, B. (2004). Szociális hálózatok.\nBeszélő, 9(7). http://beszelo.c3.hu/cikkek/szocialis-halozatok\n\n\nCsermely, P. (2005). A rejtett hálózatok ereje. Vince Kiadó. http://linkgroup.semmelweis.hu/weaklinks_HU.php\n\n\nHoffman, T., Basa, B., & N. Kollár, K. (2022). Új sztenderdek a\nmagyar szociometriai gyakorlatban. https://doi.org/10.17627/ALKPSZICH.2022.1.67\n\n\nHoffmann, T., Basa, B., & N. Kollár, K. (2023). A többszempontú\nszociometria és a csoportosító szociometriai módszer különbségei,\nelőnyei és buktatói, valamint az együttes használatukban rejlő\nlehetőségek. https://doi.org/10.17627/ALKPSZICH.2023.2.57\n\n\nKeszi, T., & Lohner, K. (2022). A hálózatelemzés elmélete és\nrendőrségi gyakorlata. Belügyi Szemle, 70(1), 69–86.\nhttps://doi.org/10.38146/bsz.2022.1.5\n\n\nKürtösi, Z. (2011). Társadalmi kapcsolathálózatok elemzése (K.\nTakács, Ed.; pp. 19–31). BCE Szociológia és Társadalompolitika Intézet.\nhttps://unipub.lib.uni-corvinus.hu/4699/\n\n\nMérei, F. (1998). Közösségek rejtett hálózata. Osiris Kiadó.\n\n\nMolnár, L. (2020). A\nhálózatelemzés alapfogalmai\n gráfok, centralitás,\nszomszédosság, hidak és a kis világ. In Scientia rerum\npoliticarum (pp. 123–140). Dialóg Campus. https://doi.org/10.36250/00734.07\n\n\nN. Kollár, K. (2017). Pedagógusok pszichológiaikézikönyve, 2\n(K. N. Kollár & É. Szabó, Eds.; pp. 134–192). Osiris Kiadó.\n\n\nSallay, H., & Perge, J. (2007). A szociometriai módszer\nalkalmazása alsó- és középfokúoktatási intézményekben (Második,\nmódosított kiadás). ELTE PPK.",
    "crumbs": [
      "Hivatkozások"
    ]
  }
]